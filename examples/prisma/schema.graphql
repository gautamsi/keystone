# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Ability {
  id: ID!
  name: String
  title: String
  entityId: BigInt
  entityType: String
  onlyOwned: Boolean
  options: String
  scope: Int
  createdAt: DateTime
  updatedAt: DateTime
  permissions(where: PermissionWhereInput! = {}, orderBy: [PermissionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Permission!]
  permissionsCount(where: PermissionWhereInput! = {}): Int
}

scalar BigInt

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AbilityWhereUniqueInput {
  id: ID
}

input AbilityWhereInput {
  AND: [AbilityWhereInput!]
  OR: [AbilityWhereInput!]
  NOT: [AbilityWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  entityId: BigIntNullableFilter
  entityType: StringFilter
  onlyOwned: BooleanFilter
  options: StringFilter
  scope: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  permissions: PermissionManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BigIntNullableFilter {
  equals: BigInt
  in: [BigInt!]
  notIn: [BigInt!]
  lt: BigInt
  lte: BigInt
  gt: BigInt
  gte: BigInt
  not: BigIntNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PermissionManyRelationFilter {
  every: PermissionWhereInput
  some: PermissionWhereInput
  none: PermissionWhereInput
}

input AbilityOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  entityId: OrderDirection
  entityType: OrderDirection
  onlyOwned: OrderDirection
  options: OrderDirection
  scope: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AbilityUpdateInput {
  name: String
  title: String
  entityId: BigInt
  entityType: String
  onlyOwned: Boolean
  options: String
  scope: Int
  createdAt: DateTime
  updatedAt: DateTime
  permissions: PermissionRelateToManyForUpdateInput
}

input PermissionRelateToManyForUpdateInput {
  disconnect: [PermissionWhereUniqueInput!]
  set: [PermissionWhereUniqueInput!]
  create: [PermissionCreateInput!]
  connect: [PermissionWhereUniqueInput!]
}

input AbilityUpdateArgs {
  where: AbilityWhereUniqueInput!
  data: AbilityUpdateInput!
}

input AbilityCreateInput {
  name: String
  title: String
  entityId: BigInt
  entityType: String
  onlyOwned: Boolean
  options: String
  scope: Int
  createdAt: DateTime
  updatedAt: DateTime
  permissions: PermissionRelateToManyForCreateInput
}

input PermissionRelateToManyForCreateInput {
  create: [PermissionCreateInput!]
  connect: [PermissionWhereUniqueInput!]
}

type Address {
  id: ID!
  name: String
  addressStreet_1: String
  addressStreet_2: String
  city: String
  state: String
  zip: String
  phone: String
  fax: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
  company: Company
  country: Country
  customer: Customer
  user: User
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  name: StringFilter
  addressStreet_1: StringFilter
  addressStreet_2: StringFilter
  city: StringFilter
  state: StringFilter
  zip: StringFilter
  phone: StringFilter
  fax: StringFilter
  type: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  company: CompanyWhereInput
  country: CountryWhereInput
  customer: CustomerWhereInput
  user: UserWhereInput
}

input AddressOrderByInput {
  id: OrderDirection
  name: OrderDirection
  addressStreet_1: OrderDirection
  addressStreet_2: OrderDirection
  city: OrderDirection
  state: OrderDirection
  zip: OrderDirection
  phone: OrderDirection
  fax: OrderDirection
  type: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AddressUpdateInput {
  name: String
  addressStreet_1: String
  addressStreet_2: String
  city: String
  state: String
  zip: String
  phone: String
  fax: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForUpdateInput
  country: CountryRelateToOneForUpdateInput
  customer: CustomerRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input CompanyRelateToOneForUpdateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
}

input CountryRelateToOneForUpdateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
  disconnect: Boolean
}

input CustomerRelateToOneForUpdateInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  name: String
  addressStreet_1: String
  addressStreet_2: String
  city: String
  state: String
  zip: String
  phone: String
  fax: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForCreateInput
  country: CountryRelateToOneForCreateInput
  customer: CustomerRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

input CompanyRelateToOneForCreateInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}

input CountryRelateToOneForCreateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
}

input CustomerRelateToOneForCreateInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type AssignedRole {
  id: ID!
  entityId: BigInt
  entityType: String
  restrictedToId: BigInt
  restrictedToType: String
  scope: Int
  role: Role
}

input AssignedRoleWhereUniqueInput {
  id: ID
}

input AssignedRoleWhereInput {
  AND: [AssignedRoleWhereInput!]
  OR: [AssignedRoleWhereInput!]
  NOT: [AssignedRoleWhereInput!]
  id: IDFilter
  entityId: BigIntNullableFilter
  entityType: StringFilter
  restrictedToId: BigIntNullableFilter
  restrictedToType: StringFilter
  scope: IntNullableFilter
  role: RoleWhereInput
}

input AssignedRoleOrderByInput {
  id: OrderDirection
  entityId: OrderDirection
  entityType: OrderDirection
  restrictedToId: OrderDirection
  restrictedToType: OrderDirection
  scope: OrderDirection
}

input AssignedRoleUpdateInput {
  entityId: BigInt
  entityType: String
  restrictedToId: BigInt
  restrictedToType: String
  scope: Int
  role: RoleRelateToOneForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input AssignedRoleUpdateArgs {
  where: AssignedRoleWhereUniqueInput!
  data: AssignedRoleUpdateInput!
}

input AssignedRoleCreateInput {
  entityId: BigInt
  entityType: String
  restrictedToId: BigInt
  restrictedToType: String
  scope: Int
  role: RoleRelateToOneForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Company {
  id: ID!
  name: String
  logo: String
  uniqueHash: String
  createdAt: DateTime
  updatedAt: DateTime
  slug: String
  user: User
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  companySettings(where: CompanySettingWhereInput! = {}, orderBy: [CompanySettingOrderByInput!]! = [], take: Int, skip: Int! = 0): [CompanySetting!]
  companySettingsCount(where: CompanySettingWhereInput! = {}): Int
  customFieldValues(where: CustomFieldValueWhereInput! = {}, orderBy: [CustomFieldValueOrderByInput!]! = [], take: Int, skip: Int! = 0): [CustomFieldValue!]
  customFieldValuesCount(where: CustomFieldValueWhereInput! = {}): Int
  customFields(where: CustomFieldWhereInput! = {}, orderBy: [CustomFieldOrderByInput!]! = [], take: Int, skip: Int! = 0): [CustomField!]
  customFieldsCount(where: CustomFieldWhereInput! = {}): Int
  customers(where: CustomerWhereInput! = {}, orderBy: [CustomerOrderByInput!]! = [], take: Int, skip: Int! = 0): [Customer!]
  customersCount(where: CustomerWhereInput! = {}): Int
  estimateItems(where: EstimateItemWhereInput! = {}, orderBy: [EstimateItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [EstimateItem!]
  estimateItemsCount(where: EstimateItemWhereInput! = {}): Int
  estimates(where: EstimateWhereInput! = {}, orderBy: [EstimateOrderByInput!]! = [], take: Int, skip: Int! = 0): [Estimate!]
  estimatesCount(where: EstimateWhereInput! = {}): Int
  exchangeRateLogs(where: ExchangeRateLogWhereInput! = {}, orderBy: [ExchangeRateLogOrderByInput!]! = [], take: Int, skip: Int! = 0): [ExchangeRateLog!]
  exchangeRateLogsCount(where: ExchangeRateLogWhereInput! = {}): Int
  exchangeRateProviders(where: ExchangeRateProviderWhereInput! = {}, orderBy: [ExchangeRateProviderOrderByInput!]! = [], take: Int, skip: Int! = 0): [ExchangeRateProvider!]
  exchangeRateProvidersCount(where: ExchangeRateProviderWhereInput! = {}): Int
  expenseCategories(where: ExpenseCategoryWhereInput! = {}, orderBy: [ExpenseCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [ExpenseCategory!]
  expenseCategoriesCount(where: ExpenseCategoryWhereInput! = {}): Int
  expenses(where: ExpenseWhereInput! = {}, orderBy: [ExpenseOrderByInput!]! = [], take: Int, skip: Int! = 0): [Expense!]
  expensesCount(where: ExpenseWhereInput! = {}): Int
  invoiceItems(where: InvoiceItemWhereInput! = {}, orderBy: [InvoiceItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [InvoiceItem!]
  invoiceItemsCount(where: InvoiceItemWhereInput! = {}): Int
  invoices(where: InvoiceWhereInput! = {}, orderBy: [InvoiceOrderByInput!]! = [], take: Int, skip: Int! = 0): [Invoice!]
  invoicesCount(where: InvoiceWhereInput! = {}): Int
  items(where: ItemWhereInput! = {}, orderBy: [ItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [Item!]
  itemsCount(where: ItemWhereInput! = {}): Int
  notes(where: NoteWhereInput! = {}, orderBy: [NoteOrderByInput!]! = [], take: Int, skip: Int! = 0): [Note!]
  notesCount(where: NoteWhereInput! = {}): Int
  paymentMethods(where: PaymentMethodWhereInput! = {}, orderBy: [PaymentMethodOrderByInput!]! = [], take: Int, skip: Int! = 0): [PaymentMethod!]
  paymentMethodsCount(where: PaymentMethodWhereInput! = {}): Int
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  recurringInvoices(where: RecurringInvoiceWhereInput! = {}, orderBy: [RecurringInvoiceOrderByInput!]! = [], take: Int, skip: Int! = 0): [RecurringInvoice!]
  recurringInvoicesCount(where: RecurringInvoiceWhereInput! = {}): Int
  taxTypes(where: TaxTypeWhereInput! = {}, orderBy: [TaxTypeOrderByInput!]! = [], take: Int, skip: Int! = 0): [TaxType!]
  taxTypesCount(where: TaxTypeWhereInput! = {}): Int
  taxes(where: TaxWhereInput! = {}, orderBy: [TaxOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tax!]
  taxesCount(where: TaxWhereInput! = {}): Int
  transactions(where: TransactionWhereInput! = {}, orderBy: [TransactionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Transaction!]
  transactionsCount(where: TransactionWhereInput! = {}): Int
  units(where: UnitWhereInput! = {}, orderBy: [UnitOrderByInput!]! = [], take: Int, skip: Int! = 0): [Unit!]
  unitsCount(where: UnitWhereInput! = {}): Int
  userCompany(where: UserCompanyWhereInput! = {}, orderBy: [UserCompanyOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserCompany!]
  userCompanyCount(where: UserCompanyWhereInput! = {}): Int
}

input CompanyWhereUniqueInput {
  id: ID
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: IDFilter
  name: StringFilter
  logo: StringFilter
  uniqueHash: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  slug: StringFilter
  user: UserWhereInput
  addresses: AddressManyRelationFilter
  companySettings: CompanySettingManyRelationFilter
  customFieldValues: CustomFieldValueManyRelationFilter
  customFields: CustomFieldManyRelationFilter
  customers: CustomerManyRelationFilter
  estimateItems: EstimateItemManyRelationFilter
  estimates: EstimateManyRelationFilter
  exchangeRateLogs: ExchangeRateLogManyRelationFilter
  exchangeRateProviders: ExchangeRateProviderManyRelationFilter
  expenseCategories: ExpenseCategoryManyRelationFilter
  expenses: ExpenseManyRelationFilter
  invoiceItems: InvoiceItemManyRelationFilter
  invoices: InvoiceManyRelationFilter
  items: ItemManyRelationFilter
  notes: NoteManyRelationFilter
  paymentMethods: PaymentMethodManyRelationFilter
  payments: PaymentManyRelationFilter
  recurringInvoices: RecurringInvoiceManyRelationFilter
  taxTypes: TaxTypeManyRelationFilter
  taxes: TaxManyRelationFilter
  transactions: TransactionManyRelationFilter
  units: UnitManyRelationFilter
  userCompany: UserCompanyManyRelationFilter
}

input AddressManyRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input CompanySettingManyRelationFilter {
  every: CompanySettingWhereInput
  some: CompanySettingWhereInput
  none: CompanySettingWhereInput
}

input CustomFieldValueManyRelationFilter {
  every: CustomFieldValueWhereInput
  some: CustomFieldValueWhereInput
  none: CustomFieldValueWhereInput
}

input CustomFieldManyRelationFilter {
  every: CustomFieldWhereInput
  some: CustomFieldWhereInput
  none: CustomFieldWhereInput
}

input CustomerManyRelationFilter {
  every: CustomerWhereInput
  some: CustomerWhereInput
  none: CustomerWhereInput
}

input EstimateItemManyRelationFilter {
  every: EstimateItemWhereInput
  some: EstimateItemWhereInput
  none: EstimateItemWhereInput
}

input EstimateManyRelationFilter {
  every: EstimateWhereInput
  some: EstimateWhereInput
  none: EstimateWhereInput
}

input ExchangeRateLogManyRelationFilter {
  every: ExchangeRateLogWhereInput
  some: ExchangeRateLogWhereInput
  none: ExchangeRateLogWhereInput
}

input ExchangeRateProviderManyRelationFilter {
  every: ExchangeRateProviderWhereInput
  some: ExchangeRateProviderWhereInput
  none: ExchangeRateProviderWhereInput
}

input ExpenseCategoryManyRelationFilter {
  every: ExpenseCategoryWhereInput
  some: ExpenseCategoryWhereInput
  none: ExpenseCategoryWhereInput
}

input ExpenseManyRelationFilter {
  every: ExpenseWhereInput
  some: ExpenseWhereInput
  none: ExpenseWhereInput
}

input InvoiceItemManyRelationFilter {
  every: InvoiceItemWhereInput
  some: InvoiceItemWhereInput
  none: InvoiceItemWhereInput
}

input InvoiceManyRelationFilter {
  every: InvoiceWhereInput
  some: InvoiceWhereInput
  none: InvoiceWhereInput
}

input ItemManyRelationFilter {
  every: ItemWhereInput
  some: ItemWhereInput
  none: ItemWhereInput
}

input NoteManyRelationFilter {
  every: NoteWhereInput
  some: NoteWhereInput
  none: NoteWhereInput
}

input PaymentMethodManyRelationFilter {
  every: PaymentMethodWhereInput
  some: PaymentMethodWhereInput
  none: PaymentMethodWhereInput
}

input PaymentManyRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input RecurringInvoiceManyRelationFilter {
  every: RecurringInvoiceWhereInput
  some: RecurringInvoiceWhereInput
  none: RecurringInvoiceWhereInput
}

input TaxTypeManyRelationFilter {
  every: TaxTypeWhereInput
  some: TaxTypeWhereInput
  none: TaxTypeWhereInput
}

input TaxManyRelationFilter {
  every: TaxWhereInput
  some: TaxWhereInput
  none: TaxWhereInput
}

input TransactionManyRelationFilter {
  every: TransactionWhereInput
  some: TransactionWhereInput
  none: TransactionWhereInput
}

input UnitManyRelationFilter {
  every: UnitWhereInput
  some: UnitWhereInput
  none: UnitWhereInput
}

input UserCompanyManyRelationFilter {
  every: UserCompanyWhereInput
  some: UserCompanyWhereInput
  none: UserCompanyWhereInput
}

input CompanyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  logo: OrderDirection
  uniqueHash: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  slug: OrderDirection
}

input CompanyUpdateInput {
  name: String
  logo: String
  uniqueHash: String
  createdAt: DateTime
  updatedAt: DateTime
  slug: String
  user: UserRelateToOneForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
  companySettings: CompanySettingRelateToManyForUpdateInput
  customFieldValues: CustomFieldValueRelateToManyForUpdateInput
  customFields: CustomFieldRelateToManyForUpdateInput
  customers: CustomerRelateToManyForUpdateInput
  estimateItems: EstimateItemRelateToManyForUpdateInput
  estimates: EstimateRelateToManyForUpdateInput
  exchangeRateLogs: ExchangeRateLogRelateToManyForUpdateInput
  exchangeRateProviders: ExchangeRateProviderRelateToManyForUpdateInput
  expenseCategories: ExpenseCategoryRelateToManyForUpdateInput
  expenses: ExpenseRelateToManyForUpdateInput
  invoiceItems: InvoiceItemRelateToManyForUpdateInput
  invoices: InvoiceRelateToManyForUpdateInput
  items: ItemRelateToManyForUpdateInput
  notes: NoteRelateToManyForUpdateInput
  paymentMethods: PaymentMethodRelateToManyForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
  recurringInvoices: RecurringInvoiceRelateToManyForUpdateInput
  taxTypes: TaxTypeRelateToManyForUpdateInput
  taxes: TaxRelateToManyForUpdateInput
  transactions: TransactionRelateToManyForUpdateInput
  units: UnitRelateToManyForUpdateInput
  userCompany: UserCompanyRelateToManyForUpdateInput
}

input AddressRelateToManyForUpdateInput {
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input CompanySettingRelateToManyForUpdateInput {
  disconnect: [CompanySettingWhereUniqueInput!]
  set: [CompanySettingWhereUniqueInput!]
  create: [CompanySettingCreateInput!]
  connect: [CompanySettingWhereUniqueInput!]
}

input CustomFieldValueRelateToManyForUpdateInput {
  disconnect: [CustomFieldValueWhereUniqueInput!]
  set: [CustomFieldValueWhereUniqueInput!]
  create: [CustomFieldValueCreateInput!]
  connect: [CustomFieldValueWhereUniqueInput!]
}

input CustomFieldRelateToManyForUpdateInput {
  disconnect: [CustomFieldWhereUniqueInput!]
  set: [CustomFieldWhereUniqueInput!]
  create: [CustomFieldCreateInput!]
  connect: [CustomFieldWhereUniqueInput!]
}

input CustomerRelateToManyForUpdateInput {
  disconnect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
  create: [CustomerCreateInput!]
  connect: [CustomerWhereUniqueInput!]
}

input EstimateItemRelateToManyForUpdateInput {
  disconnect: [EstimateItemWhereUniqueInput!]
  set: [EstimateItemWhereUniqueInput!]
  create: [EstimateItemCreateInput!]
  connect: [EstimateItemWhereUniqueInput!]
}

input EstimateRelateToManyForUpdateInput {
  disconnect: [EstimateWhereUniqueInput!]
  set: [EstimateWhereUniqueInput!]
  create: [EstimateCreateInput!]
  connect: [EstimateWhereUniqueInput!]
}

input ExchangeRateLogRelateToManyForUpdateInput {
  disconnect: [ExchangeRateLogWhereUniqueInput!]
  set: [ExchangeRateLogWhereUniqueInput!]
  create: [ExchangeRateLogCreateInput!]
  connect: [ExchangeRateLogWhereUniqueInput!]
}

input ExchangeRateProviderRelateToManyForUpdateInput {
  disconnect: [ExchangeRateProviderWhereUniqueInput!]
  set: [ExchangeRateProviderWhereUniqueInput!]
  create: [ExchangeRateProviderCreateInput!]
  connect: [ExchangeRateProviderWhereUniqueInput!]
}

input ExpenseCategoryRelateToManyForUpdateInput {
  disconnect: [ExpenseCategoryWhereUniqueInput!]
  set: [ExpenseCategoryWhereUniqueInput!]
  create: [ExpenseCategoryCreateInput!]
  connect: [ExpenseCategoryWhereUniqueInput!]
}

input ExpenseRelateToManyForUpdateInput {
  disconnect: [ExpenseWhereUniqueInput!]
  set: [ExpenseWhereUniqueInput!]
  create: [ExpenseCreateInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input InvoiceItemRelateToManyForUpdateInput {
  disconnect: [InvoiceItemWhereUniqueInput!]
  set: [InvoiceItemWhereUniqueInput!]
  create: [InvoiceItemCreateInput!]
  connect: [InvoiceItemWhereUniqueInput!]
}

input InvoiceRelateToManyForUpdateInput {
  disconnect: [InvoiceWhereUniqueInput!]
  set: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateInput!]
  connect: [InvoiceWhereUniqueInput!]
}

input ItemRelateToManyForUpdateInput {
  disconnect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
}

input NoteRelateToManyForUpdateInput {
  disconnect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  create: [NoteCreateInput!]
  connect: [NoteWhereUniqueInput!]
}

input PaymentMethodRelateToManyForUpdateInput {
  disconnect: [PaymentMethodWhereUniqueInput!]
  set: [PaymentMethodWhereUniqueInput!]
  create: [PaymentMethodCreateInput!]
  connect: [PaymentMethodWhereUniqueInput!]
}

input PaymentRelateToManyForUpdateInput {
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input RecurringInvoiceRelateToManyForUpdateInput {
  disconnect: [RecurringInvoiceWhereUniqueInput!]
  set: [RecurringInvoiceWhereUniqueInput!]
  create: [RecurringInvoiceCreateInput!]
  connect: [RecurringInvoiceWhereUniqueInput!]
}

input TaxTypeRelateToManyForUpdateInput {
  disconnect: [TaxTypeWhereUniqueInput!]
  set: [TaxTypeWhereUniqueInput!]
  create: [TaxTypeCreateInput!]
  connect: [TaxTypeWhereUniqueInput!]
}

input TaxRelateToManyForUpdateInput {
  disconnect: [TaxWhereUniqueInput!]
  set: [TaxWhereUniqueInput!]
  create: [TaxCreateInput!]
  connect: [TaxWhereUniqueInput!]
}

input TransactionRelateToManyForUpdateInput {
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  create: [TransactionCreateInput!]
  connect: [TransactionWhereUniqueInput!]
}

input UnitRelateToManyForUpdateInput {
  disconnect: [UnitWhereUniqueInput!]
  set: [UnitWhereUniqueInput!]
  create: [UnitCreateInput!]
  connect: [UnitWhereUniqueInput!]
}

input UserCompanyRelateToManyForUpdateInput {
  disconnect: [UserCompanyWhereUniqueInput!]
  set: [UserCompanyWhereUniqueInput!]
  create: [UserCompanyCreateInput!]
  connect: [UserCompanyWhereUniqueInput!]
}

input CompanyUpdateArgs {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateInput!
}

input CompanyCreateInput {
  name: String
  logo: String
  uniqueHash: String
  createdAt: DateTime
  updatedAt: DateTime
  slug: String
  user: UserRelateToOneForCreateInput
  addresses: AddressRelateToManyForCreateInput
  companySettings: CompanySettingRelateToManyForCreateInput
  customFieldValues: CustomFieldValueRelateToManyForCreateInput
  customFields: CustomFieldRelateToManyForCreateInput
  customers: CustomerRelateToManyForCreateInput
  estimateItems: EstimateItemRelateToManyForCreateInput
  estimates: EstimateRelateToManyForCreateInput
  exchangeRateLogs: ExchangeRateLogRelateToManyForCreateInput
  exchangeRateProviders: ExchangeRateProviderRelateToManyForCreateInput
  expenseCategories: ExpenseCategoryRelateToManyForCreateInput
  expenses: ExpenseRelateToManyForCreateInput
  invoiceItems: InvoiceItemRelateToManyForCreateInput
  invoices: InvoiceRelateToManyForCreateInput
  items: ItemRelateToManyForCreateInput
  notes: NoteRelateToManyForCreateInput
  paymentMethods: PaymentMethodRelateToManyForCreateInput
  payments: PaymentRelateToManyForCreateInput
  recurringInvoices: RecurringInvoiceRelateToManyForCreateInput
  taxTypes: TaxTypeRelateToManyForCreateInput
  taxes: TaxRelateToManyForCreateInput
  transactions: TransactionRelateToManyForCreateInput
  units: UnitRelateToManyForCreateInput
  userCompany: UserCompanyRelateToManyForCreateInput
}

input AddressRelateToManyForCreateInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input CompanySettingRelateToManyForCreateInput {
  create: [CompanySettingCreateInput!]
  connect: [CompanySettingWhereUniqueInput!]
}

input CustomFieldValueRelateToManyForCreateInput {
  create: [CustomFieldValueCreateInput!]
  connect: [CustomFieldValueWhereUniqueInput!]
}

input CustomFieldRelateToManyForCreateInput {
  create: [CustomFieldCreateInput!]
  connect: [CustomFieldWhereUniqueInput!]
}

input CustomerRelateToManyForCreateInput {
  create: [CustomerCreateInput!]
  connect: [CustomerWhereUniqueInput!]
}

input EstimateItemRelateToManyForCreateInput {
  create: [EstimateItemCreateInput!]
  connect: [EstimateItemWhereUniqueInput!]
}

input EstimateRelateToManyForCreateInput {
  create: [EstimateCreateInput!]
  connect: [EstimateWhereUniqueInput!]
}

input ExchangeRateLogRelateToManyForCreateInput {
  create: [ExchangeRateLogCreateInput!]
  connect: [ExchangeRateLogWhereUniqueInput!]
}

input ExchangeRateProviderRelateToManyForCreateInput {
  create: [ExchangeRateProviderCreateInput!]
  connect: [ExchangeRateProviderWhereUniqueInput!]
}

input ExpenseCategoryRelateToManyForCreateInput {
  create: [ExpenseCategoryCreateInput!]
  connect: [ExpenseCategoryWhereUniqueInput!]
}

input ExpenseRelateToManyForCreateInput {
  create: [ExpenseCreateInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input InvoiceItemRelateToManyForCreateInput {
  create: [InvoiceItemCreateInput!]
  connect: [InvoiceItemWhereUniqueInput!]
}

input InvoiceRelateToManyForCreateInput {
  create: [InvoiceCreateInput!]
  connect: [InvoiceWhereUniqueInput!]
}

input ItemRelateToManyForCreateInput {
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
}

input NoteRelateToManyForCreateInput {
  create: [NoteCreateInput!]
  connect: [NoteWhereUniqueInput!]
}

input PaymentMethodRelateToManyForCreateInput {
  create: [PaymentMethodCreateInput!]
  connect: [PaymentMethodWhereUniqueInput!]
}

input PaymentRelateToManyForCreateInput {
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input RecurringInvoiceRelateToManyForCreateInput {
  create: [RecurringInvoiceCreateInput!]
  connect: [RecurringInvoiceWhereUniqueInput!]
}

input TaxTypeRelateToManyForCreateInput {
  create: [TaxTypeCreateInput!]
  connect: [TaxTypeWhereUniqueInput!]
}

input TaxRelateToManyForCreateInput {
  create: [TaxCreateInput!]
  connect: [TaxWhereUniqueInput!]
}

input TransactionRelateToManyForCreateInput {
  create: [TransactionCreateInput!]
  connect: [TransactionWhereUniqueInput!]
}

input UnitRelateToManyForCreateInput {
  create: [UnitCreateInput!]
  connect: [UnitWhereUniqueInput!]
}

input UserCompanyRelateToManyForCreateInput {
  create: [UserCompanyCreateInput!]
  connect: [UserCompanyWhereUniqueInput!]
}

type CompanySetting {
  id: ID!
  option: String
  value: String
  createdAt: DateTime
  updatedAt: DateTime
  company: Company
}

input CompanySettingWhereUniqueInput {
  id: ID
}

input CompanySettingWhereInput {
  AND: [CompanySettingWhereInput!]
  OR: [CompanySettingWhereInput!]
  NOT: [CompanySettingWhereInput!]
  id: IDFilter
  option: StringFilter
  value: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  company: CompanyWhereInput
}

input CompanySettingOrderByInput {
  id: OrderDirection
  option: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CompanySettingUpdateInput {
  option: String
  value: String
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForUpdateInput
}

input CompanySettingUpdateArgs {
  where: CompanySettingWhereUniqueInput!
  data: CompanySettingUpdateInput!
}

input CompanySettingCreateInput {
  option: String
  value: String
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForCreateInput
}

type Country {
  id: ID!
  code: String
  name: String
  phonecode: Int
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
}

input CountryWhereUniqueInput {
  id: ID
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  id: IDFilter
  code: StringFilter
  name: StringFilter
  phonecode: IntNullableFilter
  addresses: AddressManyRelationFilter
}

input CountryOrderByInput {
  id: OrderDirection
  code: OrderDirection
  name: OrderDirection
  phonecode: OrderDirection
}

input CountryUpdateInput {
  code: String
  name: String
  phonecode: Int
  addresses: AddressRelateToManyForUpdateInput
}

input CountryUpdateArgs {
  where: CountryWhereUniqueInput!
  data: CountryUpdateInput!
}

input CountryCreateInput {
  code: String
  name: String
  phonecode: Int
  addresses: AddressRelateToManyForCreateInput
}

type Currency {
  id: ID!
  name: String
  code: String
  symbol: String
  precision: Int
  thousandSeparator: String
  decimalSeparator: String
  swapCurrencySymbol: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  customers(where: CustomerWhereInput! = {}, orderBy: [CustomerOrderByInput!]! = [], take: Int, skip: Int! = 0): [Customer!]
  customersCount(where: CustomerWhereInput! = {}): Int
  estimates(where: EstimateWhereInput! = {}, orderBy: [EstimateOrderByInput!]! = [], take: Int, skip: Int! = 0): [Estimate!]
  estimatesCount(where: EstimateWhereInput! = {}): Int
  exchangeRateLogsCurrenciesToexchangeRateLogsBaseCurrencyId(where: ExchangeRateLogWhereInput! = {}, orderBy: [ExchangeRateLogOrderByInput!]! = [], take: Int, skip: Int! = 0): [ExchangeRateLog!]
  exchangeRateLogsCurrenciesToexchangeRateLogsBaseCurrencyIdCount(where: ExchangeRateLogWhereInput! = {}): Int
  exchangeRateLogsCurrenciesToexchangeRateLogsCurrencyId(where: ExchangeRateLogWhereInput! = {}, orderBy: [ExchangeRateLogOrderByInput!]! = [], take: Int, skip: Int! = 0): [ExchangeRateLog!]
  exchangeRateLogsCurrenciesToexchangeRateLogsCurrencyIdCount(where: ExchangeRateLogWhereInput! = {}): Int
  invoices(where: InvoiceWhereInput! = {}, orderBy: [InvoiceOrderByInput!]! = [], take: Int, skip: Int! = 0): [Invoice!]
  invoicesCount(where: InvoiceWhereInput! = {}): Int
  items(where: ItemWhereInput! = {}, orderBy: [ItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [Item!]
  itemsCount(where: ItemWhereInput! = {}): Int
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  recurringInvoices(where: RecurringInvoiceWhereInput! = {}, orderBy: [RecurringInvoiceOrderByInput!]! = [], take: Int, skip: Int! = 0): [RecurringInvoice!]
  recurringInvoicesCount(where: RecurringInvoiceWhereInput! = {}): Int
  taxes(where: TaxWhereInput! = {}, orderBy: [TaxOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tax!]
  taxesCount(where: TaxWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input CurrencyWhereUniqueInput {
  id: ID
}

input CurrencyWhereInput {
  AND: [CurrencyWhereInput!]
  OR: [CurrencyWhereInput!]
  NOT: [CurrencyWhereInput!]
  id: IDFilter
  name: StringFilter
  code: StringFilter
  symbol: StringFilter
  precision: IntNullableFilter
  thousandSeparator: StringFilter
  decimalSeparator: StringFilter
  swapCurrencySymbol: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  customers: CustomerManyRelationFilter
  estimates: EstimateManyRelationFilter
  exchangeRateLogsCurrenciesToexchangeRateLogsBaseCurrencyId: ExchangeRateLogManyRelationFilter
  exchangeRateLogsCurrenciesToexchangeRateLogsCurrencyId: ExchangeRateLogManyRelationFilter
  invoices: InvoiceManyRelationFilter
  items: ItemManyRelationFilter
  payments: PaymentManyRelationFilter
  recurringInvoices: RecurringInvoiceManyRelationFilter
  taxes: TaxManyRelationFilter
  users: UserManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input CurrencyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  code: OrderDirection
  symbol: OrderDirection
  precision: OrderDirection
  thousandSeparator: OrderDirection
  decimalSeparator: OrderDirection
  swapCurrencySymbol: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CurrencyUpdateInput {
  name: String
  code: String
  symbol: String
  precision: Int
  thousandSeparator: String
  decimalSeparator: String
  swapCurrencySymbol: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  customers: CustomerRelateToManyForUpdateInput
  estimates: EstimateRelateToManyForUpdateInput
  exchangeRateLogsCurrenciesToexchangeRateLogsBaseCurrencyId: ExchangeRateLogRelateToManyForUpdateInput
  exchangeRateLogsCurrenciesToexchangeRateLogsCurrencyId: ExchangeRateLogRelateToManyForUpdateInput
  invoices: InvoiceRelateToManyForUpdateInput
  items: ItemRelateToManyForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
  recurringInvoices: RecurringInvoiceRelateToManyForUpdateInput
  taxes: TaxRelateToManyForUpdateInput
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input CurrencyUpdateArgs {
  where: CurrencyWhereUniqueInput!
  data: CurrencyUpdateInput!
}

input CurrencyCreateInput {
  name: String
  code: String
  symbol: String
  precision: Int
  thousandSeparator: String
  decimalSeparator: String
  swapCurrencySymbol: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  customers: CustomerRelateToManyForCreateInput
  estimates: EstimateRelateToManyForCreateInput
  exchangeRateLogsCurrenciesToexchangeRateLogsBaseCurrencyId: ExchangeRateLogRelateToManyForCreateInput
  exchangeRateLogsCurrenciesToexchangeRateLogsCurrencyId: ExchangeRateLogRelateToManyForCreateInput
  invoices: InvoiceRelateToManyForCreateInput
  items: ItemRelateToManyForCreateInput
  payments: PaymentRelateToManyForCreateInput
  recurringInvoices: RecurringInvoiceRelateToManyForCreateInput
  taxes: TaxRelateToManyForCreateInput
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type CustomFieldValue {
  id: ID!
  customFieldValuableType: String
  customFieldValuableId: Int
  type: String
  booleanAnswer: Boolean
  dateAnswer: DateTime
  timeAnswer: DateTime
  stringAnswer: String
  numberAnswer: BigInt
  dateTimeAnswer: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  company: Company
  customField: CustomField
}

input CustomFieldValueWhereUniqueInput {
  id: ID
}

input CustomFieldValueWhereInput {
  AND: [CustomFieldValueWhereInput!]
  OR: [CustomFieldValueWhereInput!]
  NOT: [CustomFieldValueWhereInput!]
  id: IDFilter
  customFieldValuableType: StringFilter
  customFieldValuableId: IntNullableFilter
  type: StringFilter
  booleanAnswer: BooleanFilter
  dateAnswer: DateTimeNullableFilter
  timeAnswer: DateTimeNullableFilter
  stringAnswer: StringFilter
  numberAnswer: BigIntNullableFilter
  dateTimeAnswer: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  company: CompanyWhereInput
  customField: CustomFieldWhereInput
}

input CustomFieldValueOrderByInput {
  id: OrderDirection
  customFieldValuableType: OrderDirection
  customFieldValuableId: OrderDirection
  type: OrderDirection
  booleanAnswer: OrderDirection
  dateAnswer: OrderDirection
  timeAnswer: OrderDirection
  stringAnswer: OrderDirection
  numberAnswer: OrderDirection
  dateTimeAnswer: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CustomFieldValueUpdateInput {
  customFieldValuableType: String
  customFieldValuableId: Int
  type: String
  booleanAnswer: Boolean
  dateAnswer: DateTime
  timeAnswer: DateTime
  stringAnswer: String
  numberAnswer: BigInt
  dateTimeAnswer: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForUpdateInput
  customField: CustomFieldRelateToOneForUpdateInput
}

input CustomFieldRelateToOneForUpdateInput {
  create: CustomFieldCreateInput
  connect: CustomFieldWhereUniqueInput
  disconnect: Boolean
}

input CustomFieldValueUpdateArgs {
  where: CustomFieldValueWhereUniqueInput!
  data: CustomFieldValueUpdateInput!
}

input CustomFieldValueCreateInput {
  customFieldValuableType: String
  customFieldValuableId: Int
  type: String
  booleanAnswer: Boolean
  dateAnswer: DateTime
  timeAnswer: DateTime
  stringAnswer: String
  numberAnswer: BigInt
  dateTimeAnswer: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForCreateInput
  customField: CustomFieldRelateToOneForCreateInput
}

input CustomFieldRelateToOneForCreateInput {
  create: CustomFieldCreateInput
  connect: CustomFieldWhereUniqueInput
}

type CustomField {
  id: ID!
  name: String
  slug: String
  label: String
  modelType: String
  type: String
  placeholder: String
  options: String
  booleanAnswer: Boolean
  dateAnswer: DateTime
  timeAnswer: DateTime
  stringAnswer: String
  numberAnswer: BigInt
  dateTimeAnswer: DateTime
  isRequired: Boolean
  order: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  company: Company
  customFieldValues(where: CustomFieldValueWhereInput! = {}, orderBy: [CustomFieldValueOrderByInput!]! = [], take: Int, skip: Int! = 0): [CustomFieldValue!]
  customFieldValuesCount(where: CustomFieldValueWhereInput! = {}): Int
}

input CustomFieldWhereUniqueInput {
  id: ID
}

input CustomFieldWhereInput {
  AND: [CustomFieldWhereInput!]
  OR: [CustomFieldWhereInput!]
  NOT: [CustomFieldWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  label: StringFilter
  modelType: StringFilter
  type: StringFilter
  placeholder: StringFilter
  options: StringFilter
  booleanAnswer: BooleanFilter
  dateAnswer: DateTimeNullableFilter
  timeAnswer: DateTimeNullableFilter
  stringAnswer: StringFilter
  numberAnswer: BigIntNullableFilter
  dateTimeAnswer: DateTimeNullableFilter
  isRequired: BooleanFilter
  order: BigIntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  company: CompanyWhereInput
  customFieldValues: CustomFieldValueManyRelationFilter
}

input CustomFieldOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  label: OrderDirection
  modelType: OrderDirection
  type: OrderDirection
  placeholder: OrderDirection
  options: OrderDirection
  booleanAnswer: OrderDirection
  dateAnswer: OrderDirection
  timeAnswer: OrderDirection
  stringAnswer: OrderDirection
  numberAnswer: OrderDirection
  dateTimeAnswer: OrderDirection
  isRequired: OrderDirection
  order: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CustomFieldUpdateInput {
  name: String
  slug: String
  label: String
  modelType: String
  type: String
  placeholder: String
  options: String
  booleanAnswer: Boolean
  dateAnswer: DateTime
  timeAnswer: DateTime
  stringAnswer: String
  numberAnswer: BigInt
  dateTimeAnswer: DateTime
  isRequired: Boolean
  order: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForUpdateInput
  customFieldValues: CustomFieldValueRelateToManyForUpdateInput
}

input CustomFieldUpdateArgs {
  where: CustomFieldWhereUniqueInput!
  data: CustomFieldUpdateInput!
}

input CustomFieldCreateInput {
  name: String
  slug: String
  label: String
  modelType: String
  type: String
  placeholder: String
  options: String
  booleanAnswer: Boolean
  dateAnswer: DateTime
  timeAnswer: DateTime
  stringAnswer: String
  numberAnswer: BigInt
  dateTimeAnswer: DateTime
  isRequired: Boolean
  order: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForCreateInput
  customFieldValues: CustomFieldValueRelateToManyForCreateInput
}

type Customer {
  id: ID!
  prefix: String
  name: String
  email: String
  phone: String
  password: String
  rememberToken: String
  facebookId: String
  googleId: String
  githubId: String
  contactName: String
  companyName: String
  website: String
  enablePortal: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  company: Company
  user: User
  currency: Currency
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  estimates(where: EstimateWhereInput! = {}, orderBy: [EstimateOrderByInput!]! = [], take: Int, skip: Int! = 0): [Estimate!]
  estimatesCount(where: EstimateWhereInput! = {}): Int
  invoices(where: InvoiceWhereInput! = {}, orderBy: [InvoiceOrderByInput!]! = [], take: Int, skip: Int! = 0): [Invoice!]
  invoicesCount(where: InvoiceWhereInput! = {}): Int
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  recurringInvoices(where: RecurringInvoiceWhereInput! = {}, orderBy: [RecurringInvoiceOrderByInput!]! = [], take: Int, skip: Int! = 0): [RecurringInvoice!]
  recurringInvoicesCount(where: RecurringInvoiceWhereInput! = {}): Int
}

input CustomerWhereUniqueInput {
  id: ID
}

input CustomerWhereInput {
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
  id: IDFilter
  prefix: StringFilter
  name: StringFilter
  email: StringFilter
  phone: StringFilter
  password: StringFilter
  rememberToken: StringFilter
  facebookId: StringFilter
  googleId: StringFilter
  githubId: StringFilter
  contactName: StringFilter
  companyName: StringFilter
  website: StringFilter
  enablePortal: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  company: CompanyWhereInput
  user: UserWhereInput
  currency: CurrencyWhereInput
  addresses: AddressManyRelationFilter
  estimates: EstimateManyRelationFilter
  invoices: InvoiceManyRelationFilter
  payments: PaymentManyRelationFilter
  recurringInvoices: RecurringInvoiceManyRelationFilter
}

input CustomerOrderByInput {
  id: OrderDirection
  prefix: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  password: OrderDirection
  rememberToken: OrderDirection
  facebookId: OrderDirection
  googleId: OrderDirection
  githubId: OrderDirection
  contactName: OrderDirection
  companyName: OrderDirection
  website: OrderDirection
  enablePortal: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CustomerUpdateInput {
  prefix: String
  name: String
  email: String
  phone: String
  password: String
  rememberToken: String
  facebookId: String
  googleId: String
  githubId: String
  contactName: String
  companyName: String
  website: String
  enablePortal: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  currency: CurrencyRelateToOneForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
  estimates: EstimateRelateToManyForUpdateInput
  invoices: InvoiceRelateToManyForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
  recurringInvoices: RecurringInvoiceRelateToManyForUpdateInput
}

input CurrencyRelateToOneForUpdateInput {
  create: CurrencyCreateInput
  connect: CurrencyWhereUniqueInput
  disconnect: Boolean
}

input CustomerUpdateArgs {
  where: CustomerWhereUniqueInput!
  data: CustomerUpdateInput!
}

input CustomerCreateInput {
  prefix: String
  name: String
  email: String
  phone: String
  password: String
  rememberToken: String
  facebookId: String
  googleId: String
  githubId: String
  contactName: String
  companyName: String
  website: String
  enablePortal: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  currency: CurrencyRelateToOneForCreateInput
  addresses: AddressRelateToManyForCreateInput
  estimates: EstimateRelateToManyForCreateInput
  invoices: InvoiceRelateToManyForCreateInput
  payments: PaymentRelateToManyForCreateInput
  recurringInvoices: RecurringInvoiceRelateToManyForCreateInput
}

input CurrencyRelateToOneForCreateInput {
  create: CurrencyCreateInput
  connect: CurrencyWhereUniqueInput
}

type EmailLog {
  id: ID!
  from: String
  to: String
  subject: String
  body: String
  mailableType: String
  mailableId: String
  createdAt: DateTime
  updatedAt: DateTime
  token: String
}

input EmailLogWhereUniqueInput {
  id: ID
}

input EmailLogWhereInput {
  AND: [EmailLogWhereInput!]
  OR: [EmailLogWhereInput!]
  NOT: [EmailLogWhereInput!]
  id: IDFilter
  from: StringFilter
  to: StringFilter
  subject: StringFilter
  body: StringFilter
  mailableType: StringFilter
  mailableId: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  token: StringFilter
}

input EmailLogOrderByInput {
  id: OrderDirection
  from: OrderDirection
  to: OrderDirection
  subject: OrderDirection
  body: OrderDirection
  mailableType: OrderDirection
  mailableId: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  token: OrderDirection
}

input EmailLogUpdateInput {
  from: String
  to: String
  subject: String
  body: String
  mailableType: String
  mailableId: String
  createdAt: DateTime
  updatedAt: DateTime
  token: String
}

input EmailLogUpdateArgs {
  where: EmailLogWhereUniqueInput!
  data: EmailLogUpdateInput!
}

input EmailLogCreateInput {
  from: String
  to: String
  subject: String
  body: String
  mailableType: String
  mailableId: String
  createdAt: DateTime
  updatedAt: DateTime
  token: String
}

type EstimateItem {
  id: ID!
  name: String
  description: String
  discountType: String
  quantity: Decimal
  unitName: String
  discount: Decimal
  discountVal: BigInt
  price: BigInt
  tax: BigInt
  total: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  exchangeRate: Decimal
  baseDiscountVal: BigInt
  basePrice: BigInt
  baseTax: BigInt
  baseTotal: BigInt
  company: Company
  estimate: Estimate
  item: Item
  taxes(where: TaxWhereInput! = {}, orderBy: [TaxOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tax!]
  taxesCount(where: TaxWhereInput! = {}): Int
}

scalar Decimal

input EstimateItemWhereUniqueInput {
  id: ID
}

input EstimateItemWhereInput {
  AND: [EstimateItemWhereInput!]
  OR: [EstimateItemWhereInput!]
  NOT: [EstimateItemWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  discountType: StringFilter
  quantity: DecimalNullableFilter
  unitName: StringFilter
  discount: DecimalNullableFilter
  discountVal: BigIntNullableFilter
  price: BigIntNullableFilter
  tax: BigIntNullableFilter
  total: BigIntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  exchangeRate: DecimalNullableFilter
  baseDiscountVal: BigIntNullableFilter
  basePrice: BigIntNullableFilter
  baseTax: BigIntNullableFilter
  baseTotal: BigIntNullableFilter
  company: CompanyWhereInput
  estimate: EstimateWhereInput
  item: ItemWhereInput
  taxes: TaxManyRelationFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input EstimateItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  discountType: OrderDirection
  quantity: OrderDirection
  unitName: OrderDirection
  discount: OrderDirection
  discountVal: OrderDirection
  price: OrderDirection
  tax: OrderDirection
  total: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  exchangeRate: OrderDirection
  baseDiscountVal: OrderDirection
  basePrice: OrderDirection
  baseTax: OrderDirection
  baseTotal: OrderDirection
}

input EstimateItemUpdateInput {
  name: String
  description: String
  discountType: String
  quantity: Decimal
  unitName: String
  discount: Decimal
  discountVal: BigInt
  price: BigInt
  tax: BigInt
  total: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  exchangeRate: Decimal
  baseDiscountVal: BigInt
  basePrice: BigInt
  baseTax: BigInt
  baseTotal: BigInt
  company: CompanyRelateToOneForUpdateInput
  estimate: EstimateRelateToOneForUpdateInput
  item: ItemRelateToOneForUpdateInput
  taxes: TaxRelateToManyForUpdateInput
}

input EstimateRelateToOneForUpdateInput {
  create: EstimateCreateInput
  connect: EstimateWhereUniqueInput
  disconnect: Boolean
}

input ItemRelateToOneForUpdateInput {
  create: ItemCreateInput
  connect: ItemWhereUniqueInput
  disconnect: Boolean
}

input EstimateItemUpdateArgs {
  where: EstimateItemWhereUniqueInput!
  data: EstimateItemUpdateInput!
}

input EstimateItemCreateInput {
  name: String
  description: String
  discountType: String
  quantity: Decimal
  unitName: String
  discount: Decimal
  discountVal: BigInt
  price: BigInt
  tax: BigInt
  total: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  exchangeRate: Decimal
  baseDiscountVal: BigInt
  basePrice: BigInt
  baseTax: BigInt
  baseTotal: BigInt
  company: CompanyRelateToOneForCreateInput
  estimate: EstimateRelateToOneForCreateInput
  item: ItemRelateToOneForCreateInput
  taxes: TaxRelateToManyForCreateInput
}

input EstimateRelateToOneForCreateInput {
  create: EstimateCreateInput
  connect: EstimateWhereUniqueInput
}

input ItemRelateToOneForCreateInput {
  create: ItemCreateInput
  connect: ItemWhereUniqueInput
}

type Estimate {
  id: ID!
  sequenceNumber: Int
  customerSequenceNumber: Int
  estimateDate: DateTime
  expiryDate: DateTime
  estimateNumber: String
  status: String
  referenceNumber: String
  taxPerItem: String
  discountPerItem: String
  notes: String
  discount: Decimal
  discountType: String
  discountVal: BigInt
  subTotal: BigInt
  total: BigInt
  tax: BigInt
  uniqueHash: String
  createdAt: DateTime
  updatedAt: DateTime
  templateName: String
  exchangeRate: Decimal
  baseDiscountVal: BigInt
  baseSubTotal: BigInt
  baseTotal: BigInt
  baseTax: BigInt
  salesTaxType: String
  salesTaxAddressType: String
  company: Company
  user: User
  currency: Currency
  customer: Customer
  estimateItems(where: EstimateItemWhereInput! = {}, orderBy: [EstimateItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [EstimateItem!]
  estimateItemsCount(where: EstimateItemWhereInput! = {}): Int
  taxes(where: TaxWhereInput! = {}, orderBy: [TaxOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tax!]
  taxesCount(where: TaxWhereInput! = {}): Int
}

input EstimateWhereUniqueInput {
  id: ID
}

input EstimateWhereInput {
  AND: [EstimateWhereInput!]
  OR: [EstimateWhereInput!]
  NOT: [EstimateWhereInput!]
  id: IDFilter
  sequenceNumber: IntNullableFilter
  customerSequenceNumber: IntNullableFilter
  estimateDate: DateTimeNullableFilter
  expiryDate: DateTimeNullableFilter
  estimateNumber: StringFilter
  status: StringFilter
  referenceNumber: StringFilter
  taxPerItem: StringFilter
  discountPerItem: StringFilter
  notes: StringFilter
  discount: DecimalNullableFilter
  discountType: StringFilter
  discountVal: BigIntNullableFilter
  subTotal: BigIntNullableFilter
  total: BigIntNullableFilter
  tax: BigIntNullableFilter
  uniqueHash: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  templateName: StringFilter
  exchangeRate: DecimalNullableFilter
  baseDiscountVal: BigIntNullableFilter
  baseSubTotal: BigIntNullableFilter
  baseTotal: BigIntNullableFilter
  baseTax: BigIntNullableFilter
  salesTaxType: StringFilter
  salesTaxAddressType: StringFilter
  company: CompanyWhereInput
  user: UserWhereInput
  currency: CurrencyWhereInput
  customer: CustomerWhereInput
  estimateItems: EstimateItemManyRelationFilter
  taxes: TaxManyRelationFilter
}

input EstimateOrderByInput {
  id: OrderDirection
  sequenceNumber: OrderDirection
  customerSequenceNumber: OrderDirection
  estimateDate: OrderDirection
  expiryDate: OrderDirection
  estimateNumber: OrderDirection
  status: OrderDirection
  referenceNumber: OrderDirection
  taxPerItem: OrderDirection
  discountPerItem: OrderDirection
  notes: OrderDirection
  discount: OrderDirection
  discountType: OrderDirection
  discountVal: OrderDirection
  subTotal: OrderDirection
  total: OrderDirection
  tax: OrderDirection
  uniqueHash: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  templateName: OrderDirection
  exchangeRate: OrderDirection
  baseDiscountVal: OrderDirection
  baseSubTotal: OrderDirection
  baseTotal: OrderDirection
  baseTax: OrderDirection
  salesTaxType: OrderDirection
  salesTaxAddressType: OrderDirection
}

input EstimateUpdateInput {
  sequenceNumber: Int
  customerSequenceNumber: Int
  estimateDate: DateTime
  expiryDate: DateTime
  estimateNumber: String
  status: String
  referenceNumber: String
  taxPerItem: String
  discountPerItem: String
  notes: String
  discount: Decimal
  discountType: String
  discountVal: BigInt
  subTotal: BigInt
  total: BigInt
  tax: BigInt
  uniqueHash: String
  createdAt: DateTime
  updatedAt: DateTime
  templateName: String
  exchangeRate: Decimal
  baseDiscountVal: BigInt
  baseSubTotal: BigInt
  baseTotal: BigInt
  baseTax: BigInt
  salesTaxType: String
  salesTaxAddressType: String
  company: CompanyRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  currency: CurrencyRelateToOneForUpdateInput
  customer: CustomerRelateToOneForUpdateInput
  estimateItems: EstimateItemRelateToManyForUpdateInput
  taxes: TaxRelateToManyForUpdateInput
}

input EstimateUpdateArgs {
  where: EstimateWhereUniqueInput!
  data: EstimateUpdateInput!
}

input EstimateCreateInput {
  sequenceNumber: Int
  customerSequenceNumber: Int
  estimateDate: DateTime
  expiryDate: DateTime
  estimateNumber: String
  status: String
  referenceNumber: String
  taxPerItem: String
  discountPerItem: String
  notes: String
  discount: Decimal
  discountType: String
  discountVal: BigInt
  subTotal: BigInt
  total: BigInt
  tax: BigInt
  uniqueHash: String
  createdAt: DateTime
  updatedAt: DateTime
  templateName: String
  exchangeRate: Decimal
  baseDiscountVal: BigInt
  baseSubTotal: BigInt
  baseTotal: BigInt
  baseTax: BigInt
  salesTaxType: String
  salesTaxAddressType: String
  company: CompanyRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  currency: CurrencyRelateToOneForCreateInput
  customer: CustomerRelateToOneForCreateInput
  estimateItems: EstimateItemRelateToManyForCreateInput
  taxes: TaxRelateToManyForCreateInput
}

type ExchangeRateLog {
  id: ID!
  exchangeRate: Decimal
  createdAt: DateTime
  updatedAt: DateTime
  currenciesCurrenciesToexchangeRateLogsBaseCurrencyId: Currency
  company: Company
  currenciesCurrenciesToexchangeRateLogsCurrencyId: Currency
}

input ExchangeRateLogWhereUniqueInput {
  id: ID
}

input ExchangeRateLogWhereInput {
  AND: [ExchangeRateLogWhereInput!]
  OR: [ExchangeRateLogWhereInput!]
  NOT: [ExchangeRateLogWhereInput!]
  id: IDFilter
  exchangeRate: DecimalNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  currenciesCurrenciesToexchangeRateLogsBaseCurrencyId: CurrencyWhereInput
  company: CompanyWhereInput
  currenciesCurrenciesToexchangeRateLogsCurrencyId: CurrencyWhereInput
}

input ExchangeRateLogOrderByInput {
  id: OrderDirection
  exchangeRate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ExchangeRateLogUpdateInput {
  exchangeRate: Decimal
  createdAt: DateTime
  updatedAt: DateTime
  currenciesCurrenciesToexchangeRateLogsBaseCurrencyId: CurrencyRelateToOneForUpdateInput
  company: CompanyRelateToOneForUpdateInput
  currenciesCurrenciesToexchangeRateLogsCurrencyId: CurrencyRelateToOneForUpdateInput
}

input ExchangeRateLogUpdateArgs {
  where: ExchangeRateLogWhereUniqueInput!
  data: ExchangeRateLogUpdateInput!
}

input ExchangeRateLogCreateInput {
  exchangeRate: Decimal
  createdAt: DateTime
  updatedAt: DateTime
  currenciesCurrenciesToexchangeRateLogsBaseCurrencyId: CurrencyRelateToOneForCreateInput
  company: CompanyRelateToOneForCreateInput
  currenciesCurrenciesToexchangeRateLogsCurrencyId: CurrencyRelateToOneForCreateInput
}

type ExchangeRateProvider {
  id: ID!
  driver: String
  key: String
  currencies: String
  driverConfig: String
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  company: Company
}

input ExchangeRateProviderWhereUniqueInput {
  id: ID
}

input ExchangeRateProviderWhereInput {
  AND: [ExchangeRateProviderWhereInput!]
  OR: [ExchangeRateProviderWhereInput!]
  NOT: [ExchangeRateProviderWhereInput!]
  id: IDFilter
  driver: StringFilter
  key: StringFilter
  currencies: StringFilter
  driverConfig: StringFilter
  active: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  company: CompanyWhereInput
}

input ExchangeRateProviderOrderByInput {
  id: OrderDirection
  driver: OrderDirection
  key: OrderDirection
  currencies: OrderDirection
  driverConfig: OrderDirection
  active: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ExchangeRateProviderUpdateInput {
  driver: String
  key: String
  currencies: String
  driverConfig: String
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForUpdateInput
}

input ExchangeRateProviderUpdateArgs {
  where: ExchangeRateProviderWhereUniqueInput!
  data: ExchangeRateProviderUpdateInput!
}

input ExchangeRateProviderCreateInput {
  driver: String
  key: String
  currencies: String
  driverConfig: String
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForCreateInput
}

type ExpenseCategory {
  id: ID!
  name: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  company: Company
  expenses(where: ExpenseWhereInput! = {}, orderBy: [ExpenseOrderByInput!]! = [], take: Int, skip: Int! = 0): [Expense!]
  expensesCount(where: ExpenseWhereInput! = {}): Int
}

input ExpenseCategoryWhereUniqueInput {
  id: ID
}

input ExpenseCategoryWhereInput {
  AND: [ExpenseCategoryWhereInput!]
  OR: [ExpenseCategoryWhereInput!]
  NOT: [ExpenseCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  company: CompanyWhereInput
  expenses: ExpenseManyRelationFilter
}

input ExpenseCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ExpenseCategoryUpdateInput {
  name: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForUpdateInput
  expenses: ExpenseRelateToManyForUpdateInput
}

input ExpenseCategoryUpdateArgs {
  where: ExpenseCategoryWhereUniqueInput!
  data: ExpenseCategoryUpdateInput!
}

input ExpenseCategoryCreateInput {
  name: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForCreateInput
  expenses: ExpenseRelateToManyForCreateInput
}

type Expense {
  id: ID!
  expenseDate: DateTime
  attachmentReceipt: String
  amount: BigInt
  notes: String
  createdAt: DateTime
  updatedAt: DateTime
  customerId: BigInt
  exchangeRate: Decimal
  baseAmount: BigInt
  currencyId: Int
  company: Company
  user: User
  expenseCategory: ExpenseCategory
  paymentMethod: PaymentMethod
}

input ExpenseWhereUniqueInput {
  id: ID
}

input ExpenseWhereInput {
  AND: [ExpenseWhereInput!]
  OR: [ExpenseWhereInput!]
  NOT: [ExpenseWhereInput!]
  id: IDFilter
  expenseDate: DateTimeNullableFilter
  attachmentReceipt: StringFilter
  amount: BigIntNullableFilter
  notes: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  customerId: BigIntNullableFilter
  exchangeRate: DecimalNullableFilter
  baseAmount: BigIntNullableFilter
  currencyId: IntNullableFilter
  company: CompanyWhereInput
  user: UserWhereInput
  expenseCategory: ExpenseCategoryWhereInput
  paymentMethod: PaymentMethodWhereInput
}

input ExpenseOrderByInput {
  id: OrderDirection
  expenseDate: OrderDirection
  attachmentReceipt: OrderDirection
  amount: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  customerId: OrderDirection
  exchangeRate: OrderDirection
  baseAmount: OrderDirection
  currencyId: OrderDirection
}

input ExpenseUpdateInput {
  expenseDate: DateTime
  attachmentReceipt: String
  amount: BigInt
  notes: String
  createdAt: DateTime
  updatedAt: DateTime
  customerId: BigInt
  exchangeRate: Decimal
  baseAmount: BigInt
  currencyId: Int
  company: CompanyRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  expenseCategory: ExpenseCategoryRelateToOneForUpdateInput
  paymentMethod: PaymentMethodRelateToOneForUpdateInput
}

input ExpenseCategoryRelateToOneForUpdateInput {
  create: ExpenseCategoryCreateInput
  connect: ExpenseCategoryWhereUniqueInput
  disconnect: Boolean
}

input PaymentMethodRelateToOneForUpdateInput {
  create: PaymentMethodCreateInput
  connect: PaymentMethodWhereUniqueInput
  disconnect: Boolean
}

input ExpenseUpdateArgs {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateInput!
}

input ExpenseCreateInput {
  expenseDate: DateTime
  attachmentReceipt: String
  amount: BigInt
  notes: String
  createdAt: DateTime
  updatedAt: DateTime
  customerId: BigInt
  exchangeRate: Decimal
  baseAmount: BigInt
  currencyId: Int
  company: CompanyRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  expenseCategory: ExpenseCategoryRelateToOneForCreateInput
  paymentMethod: PaymentMethodRelateToOneForCreateInput
}

input ExpenseCategoryRelateToOneForCreateInput {
  create: ExpenseCategoryCreateInput
  connect: ExpenseCategoryWhereUniqueInput
}

input PaymentMethodRelateToOneForCreateInput {
  create: PaymentMethodCreateInput
  connect: PaymentMethodWhereUniqueInput
}

type FileDisk {
  id: ID!
  name: String
  type: String
  driver: String
  setAsDefault: Boolean
  credentials: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FileDiskWhereUniqueInput {
  id: ID
}

input FileDiskWhereInput {
  AND: [FileDiskWhereInput!]
  OR: [FileDiskWhereInput!]
  NOT: [FileDiskWhereInput!]
  id: IDFilter
  name: StringFilter
  type: StringFilter
  driver: StringFilter
  setAsDefault: BooleanFilter
  credentials: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input FileDiskOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  driver: OrderDirection
  setAsDefault: OrderDirection
  credentials: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FileDiskUpdateInput {
  name: String
  type: String
  driver: String
  setAsDefault: Boolean
  credentials: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FileDiskUpdateArgs {
  where: FileDiskWhereUniqueInput!
  data: FileDiskUpdateInput!
}

input FileDiskCreateInput {
  name: String
  type: String
  driver: String
  setAsDefault: Boolean
  credentials: String
  createdAt: DateTime
  updatedAt: DateTime
}

type InvoiceItem {
  id: ID!
  name: String
  description: String
  discountType: String
  price: BigInt
  quantity: Decimal
  unitName: String
  discount: Decimal
  discountVal: BigInt
  tax: BigInt
  total: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  basePrice: BigInt
  exchangeRate: Decimal
  baseDiscountVal: BigInt
  baseTax: BigInt
  baseTotal: BigInt
  company: Company
  invoice: Invoice
  item: Item
  recurringInvoice: RecurringInvoice
  taxes(where: TaxWhereInput! = {}, orderBy: [TaxOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tax!]
  taxesCount(where: TaxWhereInput! = {}): Int
}

input InvoiceItemWhereUniqueInput {
  id: ID
}

input InvoiceItemWhereInput {
  AND: [InvoiceItemWhereInput!]
  OR: [InvoiceItemWhereInput!]
  NOT: [InvoiceItemWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  discountType: StringFilter
  price: BigIntNullableFilter
  quantity: DecimalNullableFilter
  unitName: StringFilter
  discount: DecimalNullableFilter
  discountVal: BigIntNullableFilter
  tax: BigIntNullableFilter
  total: BigIntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  basePrice: BigIntNullableFilter
  exchangeRate: DecimalNullableFilter
  baseDiscountVal: BigIntNullableFilter
  baseTax: BigIntNullableFilter
  baseTotal: BigIntNullableFilter
  company: CompanyWhereInput
  invoice: InvoiceWhereInput
  item: ItemWhereInput
  recurringInvoice: RecurringInvoiceWhereInput
  taxes: TaxManyRelationFilter
}

input InvoiceItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  discountType: OrderDirection
  price: OrderDirection
  quantity: OrderDirection
  unitName: OrderDirection
  discount: OrderDirection
  discountVal: OrderDirection
  tax: OrderDirection
  total: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  basePrice: OrderDirection
  exchangeRate: OrderDirection
  baseDiscountVal: OrderDirection
  baseTax: OrderDirection
  baseTotal: OrderDirection
}

input InvoiceItemUpdateInput {
  name: String
  description: String
  discountType: String
  price: BigInt
  quantity: Decimal
  unitName: String
  discount: Decimal
  discountVal: BigInt
  tax: BigInt
  total: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  basePrice: BigInt
  exchangeRate: Decimal
  baseDiscountVal: BigInt
  baseTax: BigInt
  baseTotal: BigInt
  company: CompanyRelateToOneForUpdateInput
  invoice: InvoiceRelateToOneForUpdateInput
  item: ItemRelateToOneForUpdateInput
  recurringInvoice: RecurringInvoiceRelateToOneForUpdateInput
  taxes: TaxRelateToManyForUpdateInput
}

input InvoiceRelateToOneForUpdateInput {
  create: InvoiceCreateInput
  connect: InvoiceWhereUniqueInput
  disconnect: Boolean
}

input RecurringInvoiceRelateToOneForUpdateInput {
  create: RecurringInvoiceCreateInput
  connect: RecurringInvoiceWhereUniqueInput
  disconnect: Boolean
}

input InvoiceItemUpdateArgs {
  where: InvoiceItemWhereUniqueInput!
  data: InvoiceItemUpdateInput!
}

input InvoiceItemCreateInput {
  name: String
  description: String
  discountType: String
  price: BigInt
  quantity: Decimal
  unitName: String
  discount: Decimal
  discountVal: BigInt
  tax: BigInt
  total: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  basePrice: BigInt
  exchangeRate: Decimal
  baseDiscountVal: BigInt
  baseTax: BigInt
  baseTotal: BigInt
  company: CompanyRelateToOneForCreateInput
  invoice: InvoiceRelateToOneForCreateInput
  item: ItemRelateToOneForCreateInput
  recurringInvoice: RecurringInvoiceRelateToOneForCreateInput
  taxes: TaxRelateToManyForCreateInput
}

input InvoiceRelateToOneForCreateInput {
  create: InvoiceCreateInput
  connect: InvoiceWhereUniqueInput
}

input RecurringInvoiceRelateToOneForCreateInput {
  create: RecurringInvoiceCreateInput
  connect: RecurringInvoiceWhereUniqueInput
}

type Invoice {
  id: ID!
  sequenceNumber: Int
  customerSequenceNumber: Int
  invoiceDate: DateTime
  dueDate: DateTime
  invoiceNumber: String
  referenceNumber: String
  status: String
  paidStatus: String
  taxPerItem: String
  discountPerItem: String
  notes: String
  discountType: String
  discount: Decimal
  discountVal: BigInt
  subTotal: BigInt
  total: BigInt
  tax: BigInt
  dueAmount: BigInt
  sent: Boolean
  viewed: Boolean
  uniqueHash: String
  createdAt: DateTime
  updatedAt: DateTime
  templateName: String
  exchangeRate: Decimal
  baseDiscountVal: BigInt
  baseSubTotal: BigInt
  baseTotal: BigInt
  baseTax: BigInt
  baseDueAmount: BigInt
  salesTaxType: String
  salesTaxAddressType: String
  overdue: Boolean
  company: Company
  user: User
  currency: Currency
  customer: Customer
  recurringInvoice: RecurringInvoice
  invoiceItems(where: InvoiceItemWhereInput! = {}, orderBy: [InvoiceItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [InvoiceItem!]
  invoiceItemsCount(where: InvoiceItemWhereInput! = {}): Int
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  taxes(where: TaxWhereInput! = {}, orderBy: [TaxOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tax!]
  taxesCount(where: TaxWhereInput! = {}): Int
  transactions(where: TransactionWhereInput! = {}, orderBy: [TransactionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Transaction!]
  transactionsCount(where: TransactionWhereInput! = {}): Int
}

input InvoiceWhereUniqueInput {
  id: ID
}

input InvoiceWhereInput {
  AND: [InvoiceWhereInput!]
  OR: [InvoiceWhereInput!]
  NOT: [InvoiceWhereInput!]
  id: IDFilter
  sequenceNumber: IntNullableFilter
  customerSequenceNumber: IntNullableFilter
  invoiceDate: DateTimeNullableFilter
  dueDate: DateTimeNullableFilter
  invoiceNumber: StringFilter
  referenceNumber: StringFilter
  status: StringFilter
  paidStatus: StringFilter
  taxPerItem: StringFilter
  discountPerItem: StringFilter
  notes: StringFilter
  discountType: StringFilter
  discount: DecimalNullableFilter
  discountVal: BigIntNullableFilter
  subTotal: BigIntNullableFilter
  total: BigIntNullableFilter
  tax: BigIntNullableFilter
  dueAmount: BigIntNullableFilter
  sent: BooleanFilter
  viewed: BooleanFilter
  uniqueHash: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  templateName: StringFilter
  exchangeRate: DecimalNullableFilter
  baseDiscountVal: BigIntNullableFilter
  baseSubTotal: BigIntNullableFilter
  baseTotal: BigIntNullableFilter
  baseTax: BigIntNullableFilter
  baseDueAmount: BigIntNullableFilter
  salesTaxType: StringFilter
  salesTaxAddressType: StringFilter
  overdue: BooleanFilter
  company: CompanyWhereInput
  user: UserWhereInput
  currency: CurrencyWhereInput
  customer: CustomerWhereInput
  recurringInvoice: RecurringInvoiceWhereInput
  invoiceItems: InvoiceItemManyRelationFilter
  payments: PaymentManyRelationFilter
  taxes: TaxManyRelationFilter
  transactions: TransactionManyRelationFilter
}

input InvoiceOrderByInput {
  id: OrderDirection
  sequenceNumber: OrderDirection
  customerSequenceNumber: OrderDirection
  invoiceDate: OrderDirection
  dueDate: OrderDirection
  invoiceNumber: OrderDirection
  referenceNumber: OrderDirection
  status: OrderDirection
  paidStatus: OrderDirection
  taxPerItem: OrderDirection
  discountPerItem: OrderDirection
  notes: OrderDirection
  discountType: OrderDirection
  discount: OrderDirection
  discountVal: OrderDirection
  subTotal: OrderDirection
  total: OrderDirection
  tax: OrderDirection
  dueAmount: OrderDirection
  sent: OrderDirection
  viewed: OrderDirection
  uniqueHash: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  templateName: OrderDirection
  exchangeRate: OrderDirection
  baseDiscountVal: OrderDirection
  baseSubTotal: OrderDirection
  baseTotal: OrderDirection
  baseTax: OrderDirection
  baseDueAmount: OrderDirection
  salesTaxType: OrderDirection
  salesTaxAddressType: OrderDirection
  overdue: OrderDirection
}

input InvoiceUpdateInput {
  sequenceNumber: Int
  customerSequenceNumber: Int
  invoiceDate: DateTime
  dueDate: DateTime
  invoiceNumber: String
  referenceNumber: String
  status: String
  paidStatus: String
  taxPerItem: String
  discountPerItem: String
  notes: String
  discountType: String
  discount: Decimal
  discountVal: BigInt
  subTotal: BigInt
  total: BigInt
  tax: BigInt
  dueAmount: BigInt
  sent: Boolean
  viewed: Boolean
  uniqueHash: String
  createdAt: DateTime
  updatedAt: DateTime
  templateName: String
  exchangeRate: Decimal
  baseDiscountVal: BigInt
  baseSubTotal: BigInt
  baseTotal: BigInt
  baseTax: BigInt
  baseDueAmount: BigInt
  salesTaxType: String
  salesTaxAddressType: String
  overdue: Boolean
  company: CompanyRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  currency: CurrencyRelateToOneForUpdateInput
  customer: CustomerRelateToOneForUpdateInput
  recurringInvoice: RecurringInvoiceRelateToOneForUpdateInput
  invoiceItems: InvoiceItemRelateToManyForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
  taxes: TaxRelateToManyForUpdateInput
  transactions: TransactionRelateToManyForUpdateInput
}

input InvoiceUpdateArgs {
  where: InvoiceWhereUniqueInput!
  data: InvoiceUpdateInput!
}

input InvoiceCreateInput {
  sequenceNumber: Int
  customerSequenceNumber: Int
  invoiceDate: DateTime
  dueDate: DateTime
  invoiceNumber: String
  referenceNumber: String
  status: String
  paidStatus: String
  taxPerItem: String
  discountPerItem: String
  notes: String
  discountType: String
  discount: Decimal
  discountVal: BigInt
  subTotal: BigInt
  total: BigInt
  tax: BigInt
  dueAmount: BigInt
  sent: Boolean
  viewed: Boolean
  uniqueHash: String
  createdAt: DateTime
  updatedAt: DateTime
  templateName: String
  exchangeRate: Decimal
  baseDiscountVal: BigInt
  baseSubTotal: BigInt
  baseTotal: BigInt
  baseTax: BigInt
  baseDueAmount: BigInt
  salesTaxType: String
  salesTaxAddressType: String
  overdue: Boolean
  company: CompanyRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  currency: CurrencyRelateToOneForCreateInput
  customer: CustomerRelateToOneForCreateInput
  recurringInvoice: RecurringInvoiceRelateToOneForCreateInput
  invoiceItems: InvoiceItemRelateToManyForCreateInput
  payments: PaymentRelateToManyForCreateInput
  taxes: TaxRelateToManyForCreateInput
  transactions: TransactionRelateToManyForCreateInput
}

type Item {
  id: ID!
  name: String
  description: String
  price: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  taxPerItem: Boolean
  company: Company
  user: User
  currency: Currency
  unit: Unit
  estimateItems(where: EstimateItemWhereInput! = {}, orderBy: [EstimateItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [EstimateItem!]
  estimateItemsCount(where: EstimateItemWhereInput! = {}): Int
  invoiceItems(where: InvoiceItemWhereInput! = {}, orderBy: [InvoiceItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [InvoiceItem!]
  invoiceItemsCount(where: InvoiceItemWhereInput! = {}): Int
  taxes(where: TaxWhereInput! = {}, orderBy: [TaxOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tax!]
  taxesCount(where: TaxWhereInput! = {}): Int
}

input ItemWhereUniqueInput {
  id: ID
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  price: BigIntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  taxPerItem: BooleanFilter
  company: CompanyWhereInput
  user: UserWhereInput
  currency: CurrencyWhereInput
  unit: UnitWhereInput
  estimateItems: EstimateItemManyRelationFilter
  invoiceItems: InvoiceItemManyRelationFilter
  taxes: TaxManyRelationFilter
}

input ItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  taxPerItem: OrderDirection
}

input ItemUpdateInput {
  name: String
  description: String
  price: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  taxPerItem: Boolean
  company: CompanyRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  currency: CurrencyRelateToOneForUpdateInput
  unit: UnitRelateToOneForUpdateInput
  estimateItems: EstimateItemRelateToManyForUpdateInput
  invoiceItems: InvoiceItemRelateToManyForUpdateInput
  taxes: TaxRelateToManyForUpdateInput
}

input UnitRelateToOneForUpdateInput {
  create: UnitCreateInput
  connect: UnitWhereUniqueInput
  disconnect: Boolean
}

input ItemUpdateArgs {
  where: ItemWhereUniqueInput!
  data: ItemUpdateInput!
}

input ItemCreateInput {
  name: String
  description: String
  price: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  taxPerItem: Boolean
  company: CompanyRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  currency: CurrencyRelateToOneForCreateInput
  unit: UnitRelateToOneForCreateInput
  estimateItems: EstimateItemRelateToManyForCreateInput
  invoiceItems: InvoiceItemRelateToManyForCreateInput
  taxes: TaxRelateToManyForCreateInput
}

input UnitRelateToOneForCreateInput {
  create: UnitCreateInput
  connect: UnitWhereUniqueInput
}

type Media {
  id: ID!
  modelType: String
  modelId: BigInt
  collectionName: String
  name: String
  fileName: String
  mimeType: String
  disk: String
  size: Int
  manipulations: String
  customProperties: String
  responsiveImages: String
  orderColumn: Int
  createdAt: DateTime
  updatedAt: DateTime
  uuid: String
  conversionsDisk: String
}

input MediaWhereUniqueInput {
  id: ID
}

input MediaWhereInput {
  AND: [MediaWhereInput!]
  OR: [MediaWhereInput!]
  NOT: [MediaWhereInput!]
  id: IDFilter
  modelType: StringFilter
  modelId: BigIntNullableFilter
  collectionName: StringFilter
  name: StringFilter
  fileName: StringFilter
  mimeType: StringFilter
  disk: StringFilter
  size: IntNullableFilter
  manipulations: StringFilter
  customProperties: StringFilter
  responsiveImages: StringFilter
  orderColumn: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  uuid: StringFilter
  conversionsDisk: StringFilter
}

input MediaOrderByInput {
  id: OrderDirection
  modelType: OrderDirection
  modelId: OrderDirection
  collectionName: OrderDirection
  name: OrderDirection
  fileName: OrderDirection
  mimeType: OrderDirection
  disk: OrderDirection
  size: OrderDirection
  manipulations: OrderDirection
  customProperties: OrderDirection
  responsiveImages: OrderDirection
  orderColumn: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  uuid: OrderDirection
  conversionsDisk: OrderDirection
}

input MediaUpdateInput {
  modelType: String
  modelId: BigInt
  collectionName: String
  name: String
  fileName: String
  mimeType: String
  disk: String
  size: Int
  manipulations: String
  customProperties: String
  responsiveImages: String
  orderColumn: Int
  createdAt: DateTime
  updatedAt: DateTime
  uuid: String
  conversionsDisk: String
}

input MediaUpdateArgs {
  where: MediaWhereUniqueInput!
  data: MediaUpdateInput!
}

input MediaCreateInput {
  modelType: String
  modelId: BigInt
  collectionName: String
  name: String
  fileName: String
  mimeType: String
  disk: String
  size: Int
  manipulations: String
  customProperties: String
  responsiveImages: String
  orderColumn: Int
  createdAt: DateTime
  updatedAt: DateTime
  uuid: String
  conversionsDisk: String
}

type Migration {
  id: ID!
  migration: String
  batch: Int
}

input MigrationWhereUniqueInput {
  id: ID
}

input MigrationWhereInput {
  AND: [MigrationWhereInput!]
  OR: [MigrationWhereInput!]
  NOT: [MigrationWhereInput!]
  id: IDFilter
  migration: StringFilter
  batch: IntNullableFilter
}

input MigrationOrderByInput {
  id: OrderDirection
  migration: OrderDirection
  batch: OrderDirection
}

input MigrationUpdateInput {
  migration: String
  batch: Int
}

input MigrationUpdateArgs {
  where: MigrationWhereUniqueInput!
  data: MigrationUpdateInput!
}

input MigrationCreateInput {
  migration: String
  batch: Int
}

type Module {
  id: ID!
  name: String
  version: String
  installed: Boolean
  enabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ModuleWhereUniqueInput {
  id: ID
}

input ModuleWhereInput {
  AND: [ModuleWhereInput!]
  OR: [ModuleWhereInput!]
  NOT: [ModuleWhereInput!]
  id: IDFilter
  name: StringFilter
  version: StringFilter
  installed: BooleanFilter
  enabled: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ModuleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  version: OrderDirection
  installed: OrderDirection
  enabled: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ModuleUpdateInput {
  name: String
  version: String
  installed: Boolean
  enabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ModuleUpdateArgs {
  where: ModuleWhereUniqueInput!
  data: ModuleUpdateInput!
}

input ModuleCreateInput {
  name: String
  version: String
  installed: Boolean
  enabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type Note {
  id: ID!
  type: String
  name: String
  notes: String
  createdAt: DateTime
  updatedAt: DateTime
  company: Company
}

input NoteWhereUniqueInput {
  id: ID
}

input NoteWhereInput {
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
  id: IDFilter
  type: StringFilter
  name: StringFilter
  notes: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  company: CompanyWhereInput
}

input NoteOrderByInput {
  id: OrderDirection
  type: OrderDirection
  name: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input NoteUpdateInput {
  type: String
  name: String
  notes: String
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForUpdateInput
}

input NoteUpdateArgs {
  where: NoteWhereUniqueInput!
  data: NoteUpdateInput!
}

input NoteCreateInput {
  type: String
  name: String
  notes: String
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForCreateInput
}

type Notification {
  id: ID!
  type: String
  notifiableType: String
  notifiableId: BigInt
  data: String
  readAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationWhereUniqueInput {
  id: ID
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  id: IDFilter
  type: StringFilter
  notifiableType: StringFilter
  notifiableId: BigIntNullableFilter
  data: StringFilter
  readAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input NotificationOrderByInput {
  id: OrderDirection
  type: OrderDirection
  notifiableType: OrderDirection
  notifiableId: OrderDirection
  data: OrderDirection
  readAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input NotificationUpdateInput {
  type: String
  notifiableType: String
  notifiableId: BigInt
  data: String
  readAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationUpdateArgs {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateInput!
}

input NotificationCreateInput {
  type: String
  notifiableType: String
  notifiableId: BigInt
  data: String
  readAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type PaymentMethod {
  id: ID!
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  driver: String
  type: String
  settings: String
  active: Boolean
  useTestEnv: Boolean
  company: Company
  expenses(where: ExpenseWhereInput! = {}, orderBy: [ExpenseOrderByInput!]! = [], take: Int, skip: Int! = 0): [Expense!]
  expensesCount(where: ExpenseWhereInput! = {}): Int
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
}

input PaymentMethodWhereUniqueInput {
  id: ID
}

input PaymentMethodWhereInput {
  AND: [PaymentMethodWhereInput!]
  OR: [PaymentMethodWhereInput!]
  NOT: [PaymentMethodWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  driver: StringFilter
  type: StringNullableFilter
  settings: StringFilter
  active: BooleanFilter
  useTestEnv: BooleanFilter
  company: CompanyWhereInput
  expenses: ExpenseManyRelationFilter
  payments: PaymentManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PaymentMethodOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  driver: OrderDirection
  type: OrderDirection
  settings: OrderDirection
  active: OrderDirection
  useTestEnv: OrderDirection
}

input PaymentMethodUpdateInput {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  driver: String
  type: String
  settings: String
  active: Boolean
  useTestEnv: Boolean
  company: CompanyRelateToOneForUpdateInput
  expenses: ExpenseRelateToManyForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
}

input PaymentMethodUpdateArgs {
  where: PaymentMethodWhereUniqueInput!
  data: PaymentMethodUpdateInput!
}

input PaymentMethodCreateInput {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  driver: String
  type: String
  settings: String
  active: Boolean
  useTestEnv: Boolean
  company: CompanyRelateToOneForCreateInput
  expenses: ExpenseRelateToManyForCreateInput
  payments: PaymentRelateToManyForCreateInput
}

type Payment {
  id: ID!
  sequenceNumber: Int
  customerSequenceNumber: Int
  paymentNumber: String
  paymentDate: DateTime
  notes: String
  amount: BigInt
  uniqueHash: String
  createdAt: DateTime
  updatedAt: DateTime
  exchangeRate: Decimal
  baseAmount: BigInt
  company: Company
  user: User
  currency: Currency
  customer: Customer
  invoice: Invoice
  paymentMethod: PaymentMethod
  transaction: Transaction
}

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  sequenceNumber: IntNullableFilter
  customerSequenceNumber: IntNullableFilter
  paymentNumber: StringFilter
  paymentDate: DateTimeNullableFilter
  notes: StringFilter
  amount: BigIntNullableFilter
  uniqueHash: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  exchangeRate: DecimalNullableFilter
  baseAmount: BigIntNullableFilter
  company: CompanyWhereInput
  user: UserWhereInput
  currency: CurrencyWhereInput
  customer: CustomerWhereInput
  invoice: InvoiceWhereInput
  paymentMethod: PaymentMethodWhereInput
  transaction: TransactionWhereInput
}

input PaymentOrderByInput {
  id: OrderDirection
  sequenceNumber: OrderDirection
  customerSequenceNumber: OrderDirection
  paymentNumber: OrderDirection
  paymentDate: OrderDirection
  notes: OrderDirection
  amount: OrderDirection
  uniqueHash: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  exchangeRate: OrderDirection
  baseAmount: OrderDirection
}

input PaymentUpdateInput {
  sequenceNumber: Int
  customerSequenceNumber: Int
  paymentNumber: String
  paymentDate: DateTime
  notes: String
  amount: BigInt
  uniqueHash: String
  createdAt: DateTime
  updatedAt: DateTime
  exchangeRate: Decimal
  baseAmount: BigInt
  company: CompanyRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  currency: CurrencyRelateToOneForUpdateInput
  customer: CustomerRelateToOneForUpdateInput
  invoice: InvoiceRelateToOneForUpdateInput
  paymentMethod: PaymentMethodRelateToOneForUpdateInput
  transaction: TransactionRelateToOneForUpdateInput
}

input TransactionRelateToOneForUpdateInput {
  create: TransactionCreateInput
  connect: TransactionWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  sequenceNumber: Int
  customerSequenceNumber: Int
  paymentNumber: String
  paymentDate: DateTime
  notes: String
  amount: BigInt
  uniqueHash: String
  createdAt: DateTime
  updatedAt: DateTime
  exchangeRate: Decimal
  baseAmount: BigInt
  company: CompanyRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  currency: CurrencyRelateToOneForCreateInput
  customer: CustomerRelateToOneForCreateInput
  invoice: InvoiceRelateToOneForCreateInput
  paymentMethod: PaymentMethodRelateToOneForCreateInput
  transaction: TransactionRelateToOneForCreateInput
}

input TransactionRelateToOneForCreateInput {
  create: TransactionCreateInput
  connect: TransactionWhereUniqueInput
}

type Permission {
  id: ID!
  entityId: BigInt
  entityType: String
  forbidden: Boolean
  scope: Int
  ability: Ability
}

input PermissionWhereUniqueInput {
  id: ID
}

input PermissionWhereInput {
  AND: [PermissionWhereInput!]
  OR: [PermissionWhereInput!]
  NOT: [PermissionWhereInput!]
  id: IDFilter
  entityId: BigIntNullableFilter
  entityType: StringFilter
  forbidden: BooleanFilter
  scope: IntNullableFilter
  ability: AbilityWhereInput
}

input PermissionOrderByInput {
  id: OrderDirection
  entityId: OrderDirection
  entityType: OrderDirection
  forbidden: OrderDirection
  scope: OrderDirection
}

input PermissionUpdateInput {
  entityId: BigInt
  entityType: String
  forbidden: Boolean
  scope: Int
  ability: AbilityRelateToOneForUpdateInput
}

input AbilityRelateToOneForUpdateInput {
  create: AbilityCreateInput
  connect: AbilityWhereUniqueInput
  disconnect: Boolean
}

input PermissionUpdateArgs {
  where: PermissionWhereUniqueInput!
  data: PermissionUpdateInput!
}

input PermissionCreateInput {
  entityId: BigInt
  entityType: String
  forbidden: Boolean
  scope: Int
  ability: AbilityRelateToOneForCreateInput
}

input AbilityRelateToOneForCreateInput {
  create: AbilityCreateInput
  connect: AbilityWhereUniqueInput
}

type PersonalAccessToken {
  id: ID!
  tokenableType: String
  tokenableId: BigInt
  name: String
  token: String
  abilities: String
  lastUsedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalAccessTokenWhereUniqueInput {
  id: ID
}

input PersonalAccessTokenWhereInput {
  AND: [PersonalAccessTokenWhereInput!]
  OR: [PersonalAccessTokenWhereInput!]
  NOT: [PersonalAccessTokenWhereInput!]
  id: IDFilter
  tokenableType: StringFilter
  tokenableId: BigIntNullableFilter
  name: StringFilter
  token: StringFilter
  abilities: StringFilter
  lastUsedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PersonalAccessTokenOrderByInput {
  id: OrderDirection
  tokenableType: OrderDirection
  tokenableId: OrderDirection
  name: OrderDirection
  token: OrderDirection
  abilities: OrderDirection
  lastUsedAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PersonalAccessTokenUpdateInput {
  tokenableType: String
  tokenableId: BigInt
  name: String
  token: String
  abilities: String
  lastUsedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input PersonalAccessTokenUpdateArgs {
  where: PersonalAccessTokenWhereUniqueInput!
  data: PersonalAccessTokenUpdateInput!
}

input PersonalAccessTokenCreateInput {
  tokenableType: String
  tokenableId: BigInt
  name: String
  token: String
  abilities: String
  lastUsedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type RecurringInvoice {
  id: ID!
  startsAt: DateTime
  sendAutomatically: Boolean
  status: String
  nextInvoiceAt: DateTime
  frequency: String
  limitBy: String
  limitCount: Int
  limitDate: DateTime
  exchangeRate: Decimal
  taxPerItem: String
  discountPerItem: String
  notes: String
  discountType: String
  discount: Decimal
  discountVal: BigInt
  subTotal: BigInt
  total: BigInt
  tax: BigInt
  templateName: String
  dueAmount: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  salesTaxType: String
  salesTaxAddressType: String
  company: Company
  user: User
  currency: Currency
  customer: Customer
  invoiceItems(where: InvoiceItemWhereInput! = {}, orderBy: [InvoiceItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [InvoiceItem!]
  invoiceItemsCount(where: InvoiceItemWhereInput! = {}): Int
  invoices(where: InvoiceWhereInput! = {}, orderBy: [InvoiceOrderByInput!]! = [], take: Int, skip: Int! = 0): [Invoice!]
  invoicesCount(where: InvoiceWhereInput! = {}): Int
  taxes(where: TaxWhereInput! = {}, orderBy: [TaxOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tax!]
  taxesCount(where: TaxWhereInput! = {}): Int
}

input RecurringInvoiceWhereUniqueInput {
  id: ID
}

input RecurringInvoiceWhereInput {
  AND: [RecurringInvoiceWhereInput!]
  OR: [RecurringInvoiceWhereInput!]
  NOT: [RecurringInvoiceWhereInput!]
  id: IDFilter
  startsAt: DateTimeNullableFilter
  sendAutomatically: BooleanFilter
  status: StringNullableFilter
  nextInvoiceAt: DateTimeNullableFilter
  frequency: StringFilter
  limitBy: StringNullableFilter
  limitCount: IntNullableFilter
  limitDate: DateTimeNullableFilter
  exchangeRate: DecimalNullableFilter
  taxPerItem: StringFilter
  discountPerItem: StringFilter
  notes: StringFilter
  discountType: StringFilter
  discount: DecimalNullableFilter
  discountVal: BigIntNullableFilter
  subTotal: BigIntNullableFilter
  total: BigIntNullableFilter
  tax: BigIntNullableFilter
  templateName: StringFilter
  dueAmount: BigIntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  salesTaxType: StringFilter
  salesTaxAddressType: StringFilter
  company: CompanyWhereInput
  user: UserWhereInput
  currency: CurrencyWhereInput
  customer: CustomerWhereInput
  invoiceItems: InvoiceItemManyRelationFilter
  invoices: InvoiceManyRelationFilter
  taxes: TaxManyRelationFilter
}

input RecurringInvoiceOrderByInput {
  id: OrderDirection
  startsAt: OrderDirection
  sendAutomatically: OrderDirection
  status: OrderDirection
  nextInvoiceAt: OrderDirection
  frequency: OrderDirection
  limitBy: OrderDirection
  limitCount: OrderDirection
  limitDate: OrderDirection
  exchangeRate: OrderDirection
  taxPerItem: OrderDirection
  discountPerItem: OrderDirection
  notes: OrderDirection
  discountType: OrderDirection
  discount: OrderDirection
  discountVal: OrderDirection
  subTotal: OrderDirection
  total: OrderDirection
  tax: OrderDirection
  templateName: OrderDirection
  dueAmount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  salesTaxType: OrderDirection
  salesTaxAddressType: OrderDirection
}

input RecurringInvoiceUpdateInput {
  startsAt: DateTime
  sendAutomatically: Boolean
  status: String
  nextInvoiceAt: DateTime
  frequency: String
  limitBy: String
  limitCount: Int
  limitDate: DateTime
  exchangeRate: Decimal
  taxPerItem: String
  discountPerItem: String
  notes: String
  discountType: String
  discount: Decimal
  discountVal: BigInt
  subTotal: BigInt
  total: BigInt
  tax: BigInt
  templateName: String
  dueAmount: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  salesTaxType: String
  salesTaxAddressType: String
  company: CompanyRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  currency: CurrencyRelateToOneForUpdateInput
  customer: CustomerRelateToOneForUpdateInput
  invoiceItems: InvoiceItemRelateToManyForUpdateInput
  invoices: InvoiceRelateToManyForUpdateInput
  taxes: TaxRelateToManyForUpdateInput
}

input RecurringInvoiceUpdateArgs {
  where: RecurringInvoiceWhereUniqueInput!
  data: RecurringInvoiceUpdateInput!
}

input RecurringInvoiceCreateInput {
  startsAt: DateTime
  sendAutomatically: Boolean
  status: String
  nextInvoiceAt: DateTime
  frequency: String
  limitBy: String
  limitCount: Int
  limitDate: DateTime
  exchangeRate: Decimal
  taxPerItem: String
  discountPerItem: String
  notes: String
  discountType: String
  discount: Decimal
  discountVal: BigInt
  subTotal: BigInt
  total: BigInt
  tax: BigInt
  templateName: String
  dueAmount: BigInt
  createdAt: DateTime
  updatedAt: DateTime
  salesTaxType: String
  salesTaxAddressType: String
  company: CompanyRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  currency: CurrencyRelateToOneForCreateInput
  customer: CustomerRelateToOneForCreateInput
  invoiceItems: InvoiceItemRelateToManyForCreateInput
  invoices: InvoiceRelateToManyForCreateInput
  taxes: TaxRelateToManyForCreateInput
}

type Role {
  id: ID!
  name: String
  title: String
  level: Int
  scope: Int
  createdAt: DateTime
  updatedAt: DateTime
  assignedRoles(where: AssignedRoleWhereInput! = {}, orderBy: [AssignedRoleOrderByInput!]! = [], take: Int, skip: Int! = 0): [AssignedRole!]
  assignedRolesCount(where: AssignedRoleWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  level: IntNullableFilter
  scope: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  assignedRoles: AssignedRoleManyRelationFilter
}

input AssignedRoleManyRelationFilter {
  every: AssignedRoleWhereInput
  some: AssignedRoleWhereInput
  none: AssignedRoleWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  level: OrderDirection
  scope: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input RoleUpdateInput {
  name: String
  title: String
  level: Int
  scope: Int
  createdAt: DateTime
  updatedAt: DateTime
  assignedRoles: AssignedRoleRelateToManyForUpdateInput
}

input AssignedRoleRelateToManyForUpdateInput {
  disconnect: [AssignedRoleWhereUniqueInput!]
  set: [AssignedRoleWhereUniqueInput!]
  create: [AssignedRoleCreateInput!]
  connect: [AssignedRoleWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  title: String
  level: Int
  scope: Int
  createdAt: DateTime
  updatedAt: DateTime
  assignedRoles: AssignedRoleRelateToManyForCreateInput
}

input AssignedRoleRelateToManyForCreateInput {
  create: [AssignedRoleCreateInput!]
  connect: [AssignedRoleWhereUniqueInput!]
}

type Setting {
  id: ID!
  option: String
  value: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SettingWhereUniqueInput {
  id: ID
}

input SettingWhereInput {
  AND: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
  id: IDFilter
  option: StringFilter
  value: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SettingOrderByInput {
  id: OrderDirection
  option: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SettingUpdateInput {
  option: String
  value: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SettingUpdateArgs {
  where: SettingWhereUniqueInput!
  data: SettingUpdateInput!
}

input SettingCreateInput {
  option: String
  value: String
  createdAt: DateTime
  updatedAt: DateTime
}

type TaxType {
  id: ID!
  name: String
  percent: Decimal
  compoundTax: Int
  collectiveTax: Int
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  type: String
  company: Company
  taxes(where: TaxWhereInput! = {}, orderBy: [TaxOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tax!]
  taxesCount(where: TaxWhereInput! = {}): Int
}

input TaxTypeWhereUniqueInput {
  id: ID
}

input TaxTypeWhereInput {
  AND: [TaxTypeWhereInput!]
  OR: [TaxTypeWhereInput!]
  NOT: [TaxTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  percent: DecimalNullableFilter
  compoundTax: IntNullableFilter
  collectiveTax: IntNullableFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  type: StringNullableFilter
  company: CompanyWhereInput
  taxes: TaxManyRelationFilter
}

input TaxTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  percent: OrderDirection
  compoundTax: OrderDirection
  collectiveTax: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  type: OrderDirection
}

input TaxTypeUpdateInput {
  name: String
  percent: Decimal
  compoundTax: Int
  collectiveTax: Int
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  type: String
  company: CompanyRelateToOneForUpdateInput
  taxes: TaxRelateToManyForUpdateInput
}

input TaxTypeUpdateArgs {
  where: TaxTypeWhereUniqueInput!
  data: TaxTypeUpdateInput!
}

input TaxTypeCreateInput {
  name: String
  percent: Decimal
  compoundTax: Int
  collectiveTax: Int
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  type: String
  company: CompanyRelateToOneForCreateInput
  taxes: TaxRelateToManyForCreateInput
}

type Tax {
  id: ID!
  name: String
  amount: BigInt
  percent: Decimal
  compoundTax: Int
  createdAt: DateTime
  updatedAt: DateTime
  exchangeRate: Decimal
  baseAmount: BigInt
  company: Company
  currency: Currency
  estimate: Estimate
  estimateItem: EstimateItem
  invoice: Invoice
  invoiceItem: InvoiceItem
  item: Item
  recurringInvoice: RecurringInvoice
  taxType: TaxType
}

input TaxWhereUniqueInput {
  id: ID
}

input TaxWhereInput {
  AND: [TaxWhereInput!]
  OR: [TaxWhereInput!]
  NOT: [TaxWhereInput!]
  id: IDFilter
  name: StringFilter
  amount: BigIntNullableFilter
  percent: DecimalNullableFilter
  compoundTax: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  exchangeRate: DecimalNullableFilter
  baseAmount: BigIntNullableFilter
  company: CompanyWhereInput
  currency: CurrencyWhereInput
  estimate: EstimateWhereInput
  estimateItem: EstimateItemWhereInput
  invoice: InvoiceWhereInput
  invoiceItem: InvoiceItemWhereInput
  item: ItemWhereInput
  recurringInvoice: RecurringInvoiceWhereInput
  taxType: TaxTypeWhereInput
}

input TaxOrderByInput {
  id: OrderDirection
  name: OrderDirection
  amount: OrderDirection
  percent: OrderDirection
  compoundTax: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  exchangeRate: OrderDirection
  baseAmount: OrderDirection
}

input TaxUpdateInput {
  name: String
  amount: BigInt
  percent: Decimal
  compoundTax: Int
  createdAt: DateTime
  updatedAt: DateTime
  exchangeRate: Decimal
  baseAmount: BigInt
  company: CompanyRelateToOneForUpdateInput
  currency: CurrencyRelateToOneForUpdateInput
  estimate: EstimateRelateToOneForUpdateInput
  estimateItem: EstimateItemRelateToOneForUpdateInput
  invoice: InvoiceRelateToOneForUpdateInput
  invoiceItem: InvoiceItemRelateToOneForUpdateInput
  item: ItemRelateToOneForUpdateInput
  recurringInvoice: RecurringInvoiceRelateToOneForUpdateInput
  taxType: TaxTypeRelateToOneForUpdateInput
}

input EstimateItemRelateToOneForUpdateInput {
  create: EstimateItemCreateInput
  connect: EstimateItemWhereUniqueInput
  disconnect: Boolean
}

input InvoiceItemRelateToOneForUpdateInput {
  create: InvoiceItemCreateInput
  connect: InvoiceItemWhereUniqueInput
  disconnect: Boolean
}

input TaxTypeRelateToOneForUpdateInput {
  create: TaxTypeCreateInput
  connect: TaxTypeWhereUniqueInput
  disconnect: Boolean
}

input TaxUpdateArgs {
  where: TaxWhereUniqueInput!
  data: TaxUpdateInput!
}

input TaxCreateInput {
  name: String
  amount: BigInt
  percent: Decimal
  compoundTax: Int
  createdAt: DateTime
  updatedAt: DateTime
  exchangeRate: Decimal
  baseAmount: BigInt
  company: CompanyRelateToOneForCreateInput
  currency: CurrencyRelateToOneForCreateInput
  estimate: EstimateRelateToOneForCreateInput
  estimateItem: EstimateItemRelateToOneForCreateInput
  invoice: InvoiceRelateToOneForCreateInput
  invoiceItem: InvoiceItemRelateToOneForCreateInput
  item: ItemRelateToOneForCreateInput
  recurringInvoice: RecurringInvoiceRelateToOneForCreateInput
  taxType: TaxTypeRelateToOneForCreateInput
}

input EstimateItemRelateToOneForCreateInput {
  create: EstimateItemCreateInput
  connect: EstimateItemWhereUniqueInput
}

input InvoiceItemRelateToOneForCreateInput {
  create: InvoiceItemCreateInput
  connect: InvoiceItemWhereUniqueInput
}

input TaxTypeRelateToOneForCreateInput {
  create: TaxTypeCreateInput
  connect: TaxTypeWhereUniqueInput
}

type Transaction {
  id: ID!
  transactionId: String
  uniqueHash: String
  type: String
  status: String
  transactionDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  company: Company
  invoice: Invoice
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
}

input TransactionWhereUniqueInput {
  id: ID
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  id: IDFilter
  transactionId: StringFilter
  uniqueHash: StringFilter
  type: StringFilter
  status: StringFilter
  transactionDate: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  company: CompanyWhereInput
  invoice: InvoiceWhereInput
  payments: PaymentManyRelationFilter
}

input TransactionOrderByInput {
  id: OrderDirection
  transactionId: OrderDirection
  uniqueHash: OrderDirection
  type: OrderDirection
  status: OrderDirection
  transactionDate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TransactionUpdateInput {
  transactionId: String
  uniqueHash: String
  type: String
  status: String
  transactionDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForUpdateInput
  invoice: InvoiceRelateToOneForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
}

input TransactionUpdateArgs {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateInput!
}

input TransactionCreateInput {
  transactionId: String
  uniqueHash: String
  type: String
  status: String
  transactionDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForCreateInput
  invoice: InvoiceRelateToOneForCreateInput
  payments: PaymentRelateToManyForCreateInput
}

type Unit {
  id: ID!
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  company: Company
  items(where: ItemWhereInput! = {}, orderBy: [ItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [Item!]
  itemsCount(where: ItemWhereInput! = {}): Int
}

input UnitWhereUniqueInput {
  id: ID
}

input UnitWhereInput {
  AND: [UnitWhereInput!]
  OR: [UnitWhereInput!]
  NOT: [UnitWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  company: CompanyWhereInput
  items: ItemManyRelationFilter
}

input UnitOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UnitUpdateInput {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForUpdateInput
  items: ItemRelateToManyForUpdateInput
}

input UnitUpdateArgs {
  where: UnitWhereUniqueInput!
  data: UnitUpdateInput!
}

input UnitCreateInput {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForCreateInput
  items: ItemRelateToManyForCreateInput
}

type UserCompany {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  company: Company
  user: User
}

input UserCompanyWhereUniqueInput {
  id: ID
}

input UserCompanyWhereInput {
  AND: [UserCompanyWhereInput!]
  OR: [UserCompanyWhereInput!]
  NOT: [UserCompanyWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  company: CompanyWhereInput
  user: UserWhereInput
}

input UserCompanyOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UserCompanyUpdateInput {
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
}

input UserCompanyUpdateArgs {
  where: UserCompanyWhereUniqueInput!
  data: UserCompanyUpdateInput!
}

input UserCompanyCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
}

type UserSetting {
  id: ID!
  key: String
  value: String
  createdAt: DateTime
  updatedAt: DateTime
  user: User
}

input UserSettingWhereUniqueInput {
  id: ID
}

input UserSettingWhereInput {
  AND: [UserSettingWhereInput!]
  OR: [UserSettingWhereInput!]
  NOT: [UserSettingWhereInput!]
  id: IDFilter
  key: StringFilter
  value: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  user: UserWhereInput
}

input UserSettingOrderByInput {
  id: OrderDirection
  key: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UserSettingUpdateInput {
  key: String
  value: String
  createdAt: DateTime
  updatedAt: DateTime
  user: UserRelateToOneForUpdateInput
}

input UserSettingUpdateArgs {
  where: UserSettingWhereUniqueInput!
  data: UserSettingUpdateInput!
}

input UserSettingCreateInput {
  key: String
  value: String
  createdAt: DateTime
  updatedAt: DateTime
  user: UserRelateToOneForCreateInput
}

type User {
  id: ID!
  name: String
  isAdmin: Boolean
  email: String
  phone: String
  password: PasswordState
  role: String
  rememberToken: String
  facebookId: String
  googleId: String
  githubId: String
  contactName: String
  companyName: String
  website: String
  enablePortal: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  user: User
  currency: Currency
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  companies(where: CompanyWhereInput! = {}, orderBy: [CompanyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Company!]
  companiesCount(where: CompanyWhereInput! = {}): Int
  customers(where: CustomerWhereInput! = {}, orderBy: [CustomerOrderByInput!]! = [], take: Int, skip: Int! = 0): [Customer!]
  customersCount(where: CustomerWhereInput! = {}): Int
  estimates(where: EstimateWhereInput! = {}, orderBy: [EstimateOrderByInput!]! = [], take: Int, skip: Int! = 0): [Estimate!]
  estimatesCount(where: EstimateWhereInput! = {}): Int
  expenses(where: ExpenseWhereInput! = {}, orderBy: [ExpenseOrderByInput!]! = [], take: Int, skip: Int! = 0): [Expense!]
  expensesCount(where: ExpenseWhereInput! = {}): Int
  invoices(where: InvoiceWhereInput! = {}, orderBy: [InvoiceOrderByInput!]! = [], take: Int, skip: Int! = 0): [Invoice!]
  invoicesCount(where: InvoiceWhereInput! = {}): Int
  items(where: ItemWhereInput! = {}, orderBy: [ItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [Item!]
  itemsCount(where: ItemWhereInput! = {}): Int
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  recurringInvoices(where: RecurringInvoiceWhereInput! = {}, orderBy: [RecurringInvoiceOrderByInput!]! = [], take: Int, skip: Int! = 0): [RecurringInvoice!]
  recurringInvoicesCount(where: RecurringInvoiceWhereInput! = {}): Int
  userCompany(where: UserCompanyWhereInput! = {}, orderBy: [UserCompanyOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserCompany!]
  userCompanyCount(where: UserCompanyWhereInput! = {}): Int
  userSettings(where: UserSettingWhereInput! = {}, orderBy: [UserSettingOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserSetting!]
  userSettingsCount(where: UserSettingWhereInput! = {}): Int
  otherUsers(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  otherUsersCount(where: UserWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  isAdmin: BooleanFilter
  email: StringFilter
  phone: StringFilter
  password: PasswordFilter
  role: StringFilter
  rememberToken: StringFilter
  facebookId: StringFilter
  googleId: StringFilter
  githubId: StringFilter
  contactName: StringFilter
  companyName: StringFilter
  website: StringFilter
  enablePortal: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  user: UserWhereInput
  currency: CurrencyWhereInput
  addresses: AddressManyRelationFilter
  companies: CompanyManyRelationFilter
  customers: CustomerManyRelationFilter
  estimates: EstimateManyRelationFilter
  expenses: ExpenseManyRelationFilter
  invoices: InvoiceManyRelationFilter
  items: ItemManyRelationFilter
  payments: PaymentManyRelationFilter
  recurringInvoices: RecurringInvoiceManyRelationFilter
  userCompany: UserCompanyManyRelationFilter
  userSettings: UserSettingManyRelationFilter
  otherUsers: UserManyRelationFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input CompanyManyRelationFilter {
  every: CompanyWhereInput
  some: CompanyWhereInput
  none: CompanyWhereInput
}

input UserSettingManyRelationFilter {
  every: UserSettingWhereInput
  some: UserSettingWhereInput
  none: UserSettingWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  isAdmin: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  role: OrderDirection
  rememberToken: OrderDirection
  facebookId: OrderDirection
  googleId: OrderDirection
  githubId: OrderDirection
  contactName: OrderDirection
  companyName: OrderDirection
  website: OrderDirection
  enablePortal: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UserUpdateInput {
  name: String
  isAdmin: Boolean
  email: String
  phone: String
  password: String
  role: String
  rememberToken: String
  facebookId: String
  googleId: String
  githubId: String
  contactName: String
  companyName: String
  website: String
  enablePortal: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  user: UserRelateToOneForUpdateInput
  currency: CurrencyRelateToOneForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
  companies: CompanyRelateToManyForUpdateInput
  customers: CustomerRelateToManyForUpdateInput
  estimates: EstimateRelateToManyForUpdateInput
  expenses: ExpenseRelateToManyForUpdateInput
  invoices: InvoiceRelateToManyForUpdateInput
  items: ItemRelateToManyForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
  recurringInvoices: RecurringInvoiceRelateToManyForUpdateInput
  userCompany: UserCompanyRelateToManyForUpdateInput
  userSettings: UserSettingRelateToManyForUpdateInput
  otherUsers: UserRelateToManyForUpdateInput
}

input CompanyRelateToManyForUpdateInput {
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  create: [CompanyCreateInput!]
  connect: [CompanyWhereUniqueInput!]
}

input UserSettingRelateToManyForUpdateInput {
  disconnect: [UserSettingWhereUniqueInput!]
  set: [UserSettingWhereUniqueInput!]
  create: [UserSettingCreateInput!]
  connect: [UserSettingWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  isAdmin: Boolean
  email: String
  phone: String
  password: String
  role: String
  rememberToken: String
  facebookId: String
  googleId: String
  githubId: String
  contactName: String
  companyName: String
  website: String
  enablePortal: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  user: UserRelateToOneForCreateInput
  currency: CurrencyRelateToOneForCreateInput
  addresses: AddressRelateToManyForCreateInput
  companies: CompanyRelateToManyForCreateInput
  customers: CustomerRelateToManyForCreateInput
  estimates: EstimateRelateToManyForCreateInput
  expenses: ExpenseRelateToManyForCreateInput
  invoices: InvoiceRelateToManyForCreateInput
  items: ItemRelateToManyForCreateInput
  payments: PaymentRelateToManyForCreateInput
  recurringInvoices: RecurringInvoiceRelateToManyForCreateInput
  userCompany: UserCompanyRelateToManyForCreateInput
  userSettings: UserSettingRelateToManyForCreateInput
  otherUsers: UserRelateToManyForCreateInput
}

input CompanyRelateToManyForCreateInput {
  create: [CompanyCreateInput!]
  connect: [CompanyWhereUniqueInput!]
}

input UserSettingRelateToManyForCreateInput {
  create: [UserSettingCreateInput!]
  connect: [UserSettingWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAbility(data: AbilityCreateInput!): Ability
  createAbilities(data: [AbilityCreateInput!]!): [Ability]
  updateAbility(where: AbilityWhereUniqueInput!, data: AbilityUpdateInput!): Ability
  updateAbilities(data: [AbilityUpdateArgs!]!): [Ability]
  deleteAbility(where: AbilityWhereUniqueInput!): Ability
  deleteAbilities(where: [AbilityWhereUniqueInput!]!): [Ability]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(where: AddressWhereUniqueInput!, data: AddressUpdateInput!): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  createAssignedRole(data: AssignedRoleCreateInput!): AssignedRole
  createAssignedRoles(data: [AssignedRoleCreateInput!]!): [AssignedRole]
  updateAssignedRole(where: AssignedRoleWhereUniqueInput!, data: AssignedRoleUpdateInput!): AssignedRole
  updateAssignedRoles(data: [AssignedRoleUpdateArgs!]!): [AssignedRole]
  deleteAssignedRole(where: AssignedRoleWhereUniqueInput!): AssignedRole
  deleteAssignedRoles(where: [AssignedRoleWhereUniqueInput!]!): [AssignedRole]
  createCompany(data: CompanyCreateInput!): Company
  createCompanies(data: [CompanyCreateInput!]!): [Company]
  updateCompany(where: CompanyWhereUniqueInput!, data: CompanyUpdateInput!): Company
  updateCompanies(data: [CompanyUpdateArgs!]!): [Company]
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteCompanies(where: [CompanyWhereUniqueInput!]!): [Company]
  createCompanySetting(data: CompanySettingCreateInput!): CompanySetting
  createCompanySettings(data: [CompanySettingCreateInput!]!): [CompanySetting]
  updateCompanySetting(where: CompanySettingWhereUniqueInput!, data: CompanySettingUpdateInput!): CompanySetting
  updateCompanySettings(data: [CompanySettingUpdateArgs!]!): [CompanySetting]
  deleteCompanySetting(where: CompanySettingWhereUniqueInput!): CompanySetting
  deleteCompanySettings(where: [CompanySettingWhereUniqueInput!]!): [CompanySetting]
  createCountry(data: CountryCreateInput!): Country
  createCountries(data: [CountryCreateInput!]!): [Country]
  updateCountry(where: CountryWhereUniqueInput!, data: CountryUpdateInput!): Country
  updateCountries(data: [CountryUpdateArgs!]!): [Country]
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteCountries(where: [CountryWhereUniqueInput!]!): [Country]
  createCurrency(data: CurrencyCreateInput!): Currency
  createCurrencies(data: [CurrencyCreateInput!]!): [Currency]
  updateCurrency(where: CurrencyWhereUniqueInput!, data: CurrencyUpdateInput!): Currency
  updateCurrencies(data: [CurrencyUpdateArgs!]!): [Currency]
  deleteCurrency(where: CurrencyWhereUniqueInput!): Currency
  deleteCurrencies(where: [CurrencyWhereUniqueInput!]!): [Currency]
  createCustomFieldValue(data: CustomFieldValueCreateInput!): CustomFieldValue
  createCustomFieldValues(data: [CustomFieldValueCreateInput!]!): [CustomFieldValue]
  updateCustomFieldValue(where: CustomFieldValueWhereUniqueInput!, data: CustomFieldValueUpdateInput!): CustomFieldValue
  updateCustomFieldValues(data: [CustomFieldValueUpdateArgs!]!): [CustomFieldValue]
  deleteCustomFieldValue(where: CustomFieldValueWhereUniqueInput!): CustomFieldValue
  deleteCustomFieldValues(where: [CustomFieldValueWhereUniqueInput!]!): [CustomFieldValue]
  createCustomField(data: CustomFieldCreateInput!): CustomField
  createCustomFields(data: [CustomFieldCreateInput!]!): [CustomField]
  updateCustomField(where: CustomFieldWhereUniqueInput!, data: CustomFieldUpdateInput!): CustomField
  updateCustomFields(data: [CustomFieldUpdateArgs!]!): [CustomField]
  deleteCustomField(where: CustomFieldWhereUniqueInput!): CustomField
  deleteCustomFields(where: [CustomFieldWhereUniqueInput!]!): [CustomField]
  createCustomer(data: CustomerCreateInput!): Customer
  createCustomers(data: [CustomerCreateInput!]!): [Customer]
  updateCustomer(where: CustomerWhereUniqueInput!, data: CustomerUpdateInput!): Customer
  updateCustomers(data: [CustomerUpdateArgs!]!): [Customer]
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteCustomers(where: [CustomerWhereUniqueInput!]!): [Customer]
  createEmailLog(data: EmailLogCreateInput!): EmailLog
  createEmailLogs(data: [EmailLogCreateInput!]!): [EmailLog]
  updateEmailLog(where: EmailLogWhereUniqueInput!, data: EmailLogUpdateInput!): EmailLog
  updateEmailLogs(data: [EmailLogUpdateArgs!]!): [EmailLog]
  deleteEmailLog(where: EmailLogWhereUniqueInput!): EmailLog
  deleteEmailLogs(where: [EmailLogWhereUniqueInput!]!): [EmailLog]
  createEstimateItem(data: EstimateItemCreateInput!): EstimateItem
  createEstimateItems(data: [EstimateItemCreateInput!]!): [EstimateItem]
  updateEstimateItem(where: EstimateItemWhereUniqueInput!, data: EstimateItemUpdateInput!): EstimateItem
  updateEstimateItems(data: [EstimateItemUpdateArgs!]!): [EstimateItem]
  deleteEstimateItem(where: EstimateItemWhereUniqueInput!): EstimateItem
  deleteEstimateItems(where: [EstimateItemWhereUniqueInput!]!): [EstimateItem]
  createEstimate(data: EstimateCreateInput!): Estimate
  createEstimates(data: [EstimateCreateInput!]!): [Estimate]
  updateEstimate(where: EstimateWhereUniqueInput!, data: EstimateUpdateInput!): Estimate
  updateEstimates(data: [EstimateUpdateArgs!]!): [Estimate]
  deleteEstimate(where: EstimateWhereUniqueInput!): Estimate
  deleteEstimates(where: [EstimateWhereUniqueInput!]!): [Estimate]
  createExchangeRateLog(data: ExchangeRateLogCreateInput!): ExchangeRateLog
  createExchangeRateLogs(data: [ExchangeRateLogCreateInput!]!): [ExchangeRateLog]
  updateExchangeRateLog(where: ExchangeRateLogWhereUniqueInput!, data: ExchangeRateLogUpdateInput!): ExchangeRateLog
  updateExchangeRateLogs(data: [ExchangeRateLogUpdateArgs!]!): [ExchangeRateLog]
  deleteExchangeRateLog(where: ExchangeRateLogWhereUniqueInput!): ExchangeRateLog
  deleteExchangeRateLogs(where: [ExchangeRateLogWhereUniqueInput!]!): [ExchangeRateLog]
  createExchangeRateProvider(data: ExchangeRateProviderCreateInput!): ExchangeRateProvider
  createExchangeRateProviders(data: [ExchangeRateProviderCreateInput!]!): [ExchangeRateProvider]
  updateExchangeRateProvider(where: ExchangeRateProviderWhereUniqueInput!, data: ExchangeRateProviderUpdateInput!): ExchangeRateProvider
  updateExchangeRateProviders(data: [ExchangeRateProviderUpdateArgs!]!): [ExchangeRateProvider]
  deleteExchangeRateProvider(where: ExchangeRateProviderWhereUniqueInput!): ExchangeRateProvider
  deleteExchangeRateProviders(where: [ExchangeRateProviderWhereUniqueInput!]!): [ExchangeRateProvider]
  createExpenseCategory(data: ExpenseCategoryCreateInput!): ExpenseCategory
  createExpenseCategories(data: [ExpenseCategoryCreateInput!]!): [ExpenseCategory]
  updateExpenseCategory(where: ExpenseCategoryWhereUniqueInput!, data: ExpenseCategoryUpdateInput!): ExpenseCategory
  updateExpenseCategories(data: [ExpenseCategoryUpdateArgs!]!): [ExpenseCategory]
  deleteExpenseCategory(where: ExpenseCategoryWhereUniqueInput!): ExpenseCategory
  deleteExpenseCategories(where: [ExpenseCategoryWhereUniqueInput!]!): [ExpenseCategory]
  createExpense(data: ExpenseCreateInput!): Expense
  createExpenses(data: [ExpenseCreateInput!]!): [Expense]
  updateExpense(where: ExpenseWhereUniqueInput!, data: ExpenseUpdateInput!): Expense
  updateExpenses(data: [ExpenseUpdateArgs!]!): [Expense]
  deleteExpense(where: ExpenseWhereUniqueInput!): Expense
  deleteExpenses(where: [ExpenseWhereUniqueInput!]!): [Expense]
  createFileDisk(data: FileDiskCreateInput!): FileDisk
  createFileDisks(data: [FileDiskCreateInput!]!): [FileDisk]
  updateFileDisk(where: FileDiskWhereUniqueInput!, data: FileDiskUpdateInput!): FileDisk
  updateFileDisks(data: [FileDiskUpdateArgs!]!): [FileDisk]
  deleteFileDisk(where: FileDiskWhereUniqueInput!): FileDisk
  deleteFileDisks(where: [FileDiskWhereUniqueInput!]!): [FileDisk]
  createInvoiceItem(data: InvoiceItemCreateInput!): InvoiceItem
  createInvoiceItems(data: [InvoiceItemCreateInput!]!): [InvoiceItem]
  updateInvoiceItem(where: InvoiceItemWhereUniqueInput!, data: InvoiceItemUpdateInput!): InvoiceItem
  updateInvoiceItems(data: [InvoiceItemUpdateArgs!]!): [InvoiceItem]
  deleteInvoiceItem(where: InvoiceItemWhereUniqueInput!): InvoiceItem
  deleteInvoiceItems(where: [InvoiceItemWhereUniqueInput!]!): [InvoiceItem]
  createInvoice(data: InvoiceCreateInput!): Invoice
  createInvoices(data: [InvoiceCreateInput!]!): [Invoice]
  updateInvoice(where: InvoiceWhereUniqueInput!, data: InvoiceUpdateInput!): Invoice
  updateInvoices(data: [InvoiceUpdateArgs!]!): [Invoice]
  deleteInvoice(where: InvoiceWhereUniqueInput!): Invoice
  deleteInvoices(where: [InvoiceWhereUniqueInput!]!): [Invoice]
  createItem(data: ItemCreateInput!): Item
  createItems(data: [ItemCreateInput!]!): [Item]
  updateItem(where: ItemWhereUniqueInput!, data: ItemUpdateInput!): Item
  updateItems(data: [ItemUpdateArgs!]!): [Item]
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteItems(where: [ItemWhereUniqueInput!]!): [Item]
  createMedia(data: MediaCreateInput!): Media
  createMediaFiles(data: [MediaCreateInput!]!): [Media]
  updateMedia(where: MediaWhereUniqueInput!, data: MediaUpdateInput!): Media
  updateMediaFiles(data: [MediaUpdateArgs!]!): [Media]
  deleteMedia(where: MediaWhereUniqueInput!): Media
  deleteMediaFiles(where: [MediaWhereUniqueInput!]!): [Media]
  createMigration(data: MigrationCreateInput!): Migration
  createMigrations(data: [MigrationCreateInput!]!): [Migration]
  updateMigration(where: MigrationWhereUniqueInput!, data: MigrationUpdateInput!): Migration
  updateMigrations(data: [MigrationUpdateArgs!]!): [Migration]
  deleteMigration(where: MigrationWhereUniqueInput!): Migration
  deleteMigrations(where: [MigrationWhereUniqueInput!]!): [Migration]
  createModule(data: ModuleCreateInput!): Module
  createModules(data: [ModuleCreateInput!]!): [Module]
  updateModule(where: ModuleWhereUniqueInput!, data: ModuleUpdateInput!): Module
  updateModules(data: [ModuleUpdateArgs!]!): [Module]
  deleteModule(where: ModuleWhereUniqueInput!): Module
  deleteModules(where: [ModuleWhereUniqueInput!]!): [Module]
  createNote(data: NoteCreateInput!): Note
  createNotes(data: [NoteCreateInput!]!): [Note]
  updateNote(where: NoteWhereUniqueInput!, data: NoteUpdateInput!): Note
  updateNotes(data: [NoteUpdateArgs!]!): [Note]
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteNotes(where: [NoteWhereUniqueInput!]!): [Note]
  createNotification(data: NotificationCreateInput!): Notification
  createNotifications(data: [NotificationCreateInput!]!): [Notification]
  updateNotification(where: NotificationWhereUniqueInput!, data: NotificationUpdateInput!): Notification
  updateNotifications(data: [NotificationUpdateArgs!]!): [Notification]
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteNotifications(where: [NotificationWhereUniqueInput!]!): [Notification]
  createPaymentMethod(data: PaymentMethodCreateInput!): PaymentMethod
  createPaymentMethods(data: [PaymentMethodCreateInput!]!): [PaymentMethod]
  updatePaymentMethod(where: PaymentMethodWhereUniqueInput!, data: PaymentMethodUpdateInput!): PaymentMethod
  updatePaymentMethods(data: [PaymentMethodUpdateArgs!]!): [PaymentMethod]
  deletePaymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  deletePaymentMethods(where: [PaymentMethodWhereUniqueInput!]!): [PaymentMethod]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(where: PaymentWhereUniqueInput!, data: PaymentUpdateInput!): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  createPermission(data: PermissionCreateInput!): Permission
  createPermissions(data: [PermissionCreateInput!]!): [Permission]
  updatePermission(where: PermissionWhereUniqueInput!, data: PermissionUpdateInput!): Permission
  updatePermissions(data: [PermissionUpdateArgs!]!): [Permission]
  deletePermission(where: PermissionWhereUniqueInput!): Permission
  deletePermissions(where: [PermissionWhereUniqueInput!]!): [Permission]
  createPersonalAccessToken(data: PersonalAccessTokenCreateInput!): PersonalAccessToken
  createPersonalAccessTokens(data: [PersonalAccessTokenCreateInput!]!): [PersonalAccessToken]
  updatePersonalAccessToken(where: PersonalAccessTokenWhereUniqueInput!, data: PersonalAccessTokenUpdateInput!): PersonalAccessToken
  updatePersonalAccessTokens(data: [PersonalAccessTokenUpdateArgs!]!): [PersonalAccessToken]
  deletePersonalAccessToken(where: PersonalAccessTokenWhereUniqueInput!): PersonalAccessToken
  deletePersonalAccessTokens(where: [PersonalAccessTokenWhereUniqueInput!]!): [PersonalAccessToken]
  createRecurringInvoice(data: RecurringInvoiceCreateInput!): RecurringInvoice
  createRecurringInvoices(data: [RecurringInvoiceCreateInput!]!): [RecurringInvoice]
  updateRecurringInvoice(where: RecurringInvoiceWhereUniqueInput!, data: RecurringInvoiceUpdateInput!): RecurringInvoice
  updateRecurringInvoices(data: [RecurringInvoiceUpdateArgs!]!): [RecurringInvoice]
  deleteRecurringInvoice(where: RecurringInvoiceWhereUniqueInput!): RecurringInvoice
  deleteRecurringInvoices(where: [RecurringInvoiceWhereUniqueInput!]!): [RecurringInvoice]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createSetting(data: SettingCreateInput!): Setting
  createSettings(data: [SettingCreateInput!]!): [Setting]
  updateSetting(where: SettingWhereUniqueInput!, data: SettingUpdateInput!): Setting
  updateSettings(data: [SettingUpdateArgs!]!): [Setting]
  deleteSetting(where: SettingWhereUniqueInput!): Setting
  deleteSettings(where: [SettingWhereUniqueInput!]!): [Setting]
  createTaxType(data: TaxTypeCreateInput!): TaxType
  createTaxTypes(data: [TaxTypeCreateInput!]!): [TaxType]
  updateTaxType(where: TaxTypeWhereUniqueInput!, data: TaxTypeUpdateInput!): TaxType
  updateTaxTypes(data: [TaxTypeUpdateArgs!]!): [TaxType]
  deleteTaxType(where: TaxTypeWhereUniqueInput!): TaxType
  deleteTaxTypes(where: [TaxTypeWhereUniqueInput!]!): [TaxType]
  createTax(data: TaxCreateInput!): Tax
  createTaxes(data: [TaxCreateInput!]!): [Tax]
  updateTax(where: TaxWhereUniqueInput!, data: TaxUpdateInput!): Tax
  updateTaxes(data: [TaxUpdateArgs!]!): [Tax]
  deleteTax(where: TaxWhereUniqueInput!): Tax
  deleteTaxes(where: [TaxWhereUniqueInput!]!): [Tax]
  createTransaction(data: TransactionCreateInput!): Transaction
  createTransactions(data: [TransactionCreateInput!]!): [Transaction]
  updateTransaction(where: TransactionWhereUniqueInput!, data: TransactionUpdateInput!): Transaction
  updateTransactions(data: [TransactionUpdateArgs!]!): [Transaction]
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteTransactions(where: [TransactionWhereUniqueInput!]!): [Transaction]
  createUnit(data: UnitCreateInput!): Unit
  createUnits(data: [UnitCreateInput!]!): [Unit]
  updateUnit(where: UnitWhereUniqueInput!, data: UnitUpdateInput!): Unit
  updateUnits(data: [UnitUpdateArgs!]!): [Unit]
  deleteUnit(where: UnitWhereUniqueInput!): Unit
  deleteUnits(where: [UnitWhereUniqueInput!]!): [Unit]
  createUserCompany(data: UserCompanyCreateInput!): UserCompany
  createUserCompanies(data: [UserCompanyCreateInput!]!): [UserCompany]
  updateUserCompany(where: UserCompanyWhereUniqueInput!, data: UserCompanyUpdateInput!): UserCompany
  updateUserCompanies(data: [UserCompanyUpdateArgs!]!): [UserCompany]
  deleteUserCompany(where: UserCompanyWhereUniqueInput!): UserCompany
  deleteUserCompanies(where: [UserCompanyWhereUniqueInput!]!): [UserCompany]
  createUserSetting(data: UserSettingCreateInput!): UserSetting
  createUserSettings(data: [UserSettingCreateInput!]!): [UserSetting]
  updateUserSetting(where: UserSettingWhereUniqueInput!, data: UserSettingUpdateInput!): UserSetting
  updateUserSettings(data: [UserSettingUpdateArgs!]!): [UserSetting]
  deleteUserSetting(where: UserSettingWhereUniqueInput!): UserSetting
  deleteUserSettings(where: [UserSettingWhereUniqueInput!]!): [UserSetting]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  abilities(where: AbilityWhereInput! = {}, orderBy: [AbilityOrderByInput!]! = [], take: Int, skip: Int! = 0): [Ability!]
  ability(where: AbilityWhereUniqueInput!): Ability
  abilitiesCount(where: AbilityWhereInput! = {}): Int
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0): [Address!]
  address(where: AddressWhereUniqueInput!): Address
  addressesCount(where: AddressWhereInput! = {}): Int
  assignedRoles(where: AssignedRoleWhereInput! = {}, orderBy: [AssignedRoleOrderByInput!]! = [], take: Int, skip: Int! = 0): [AssignedRole!]
  assignedRole(where: AssignedRoleWhereUniqueInput!): AssignedRole
  assignedRolesCount(where: AssignedRoleWhereInput! = {}): Int
  companies(where: CompanyWhereInput! = {}, orderBy: [CompanyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Company!]
  company(where: CompanyWhereUniqueInput!): Company
  companiesCount(where: CompanyWhereInput! = {}): Int
  companySettings(where: CompanySettingWhereInput! = {}, orderBy: [CompanySettingOrderByInput!]! = [], take: Int, skip: Int! = 0): [CompanySetting!]
  companySetting(where: CompanySettingWhereUniqueInput!): CompanySetting
  companySettingsCount(where: CompanySettingWhereInput! = {}): Int
  countries(where: CountryWhereInput! = {}, orderBy: [CountryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Country!]
  country(where: CountryWhereUniqueInput!): Country
  countriesCount(where: CountryWhereInput! = {}): Int
  currencies(where: CurrencyWhereInput! = {}, orderBy: [CurrencyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Currency!]
  currency(where: CurrencyWhereUniqueInput!): Currency
  currenciesCount(where: CurrencyWhereInput! = {}): Int
  customFieldValues(where: CustomFieldValueWhereInput! = {}, orderBy: [CustomFieldValueOrderByInput!]! = [], take: Int, skip: Int! = 0): [CustomFieldValue!]
  customFieldValue(where: CustomFieldValueWhereUniqueInput!): CustomFieldValue
  customFieldValuesCount(where: CustomFieldValueWhereInput! = {}): Int
  customFields(where: CustomFieldWhereInput! = {}, orderBy: [CustomFieldOrderByInput!]! = [], take: Int, skip: Int! = 0): [CustomField!]
  customField(where: CustomFieldWhereUniqueInput!): CustomField
  customFieldsCount(where: CustomFieldWhereInput! = {}): Int
  customers(where: CustomerWhereInput! = {}, orderBy: [CustomerOrderByInput!]! = [], take: Int, skip: Int! = 0): [Customer!]
  customer(where: CustomerWhereUniqueInput!): Customer
  customersCount(where: CustomerWhereInput! = {}): Int
  emailLogs(where: EmailLogWhereInput! = {}, orderBy: [EmailLogOrderByInput!]! = [], take: Int, skip: Int! = 0): [EmailLog!]
  emailLog(where: EmailLogWhereUniqueInput!): EmailLog
  emailLogsCount(where: EmailLogWhereInput! = {}): Int
  estimateItems(where: EstimateItemWhereInput! = {}, orderBy: [EstimateItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [EstimateItem!]
  estimateItem(where: EstimateItemWhereUniqueInput!): EstimateItem
  estimateItemsCount(where: EstimateItemWhereInput! = {}): Int
  estimates(where: EstimateWhereInput! = {}, orderBy: [EstimateOrderByInput!]! = [], take: Int, skip: Int! = 0): [Estimate!]
  estimate(where: EstimateWhereUniqueInput!): Estimate
  estimatesCount(where: EstimateWhereInput! = {}): Int
  exchangeRateLogs(where: ExchangeRateLogWhereInput! = {}, orderBy: [ExchangeRateLogOrderByInput!]! = [], take: Int, skip: Int! = 0): [ExchangeRateLog!]
  exchangeRateLog(where: ExchangeRateLogWhereUniqueInput!): ExchangeRateLog
  exchangeRateLogsCount(where: ExchangeRateLogWhereInput! = {}): Int
  exchangeRateProviders(where: ExchangeRateProviderWhereInput! = {}, orderBy: [ExchangeRateProviderOrderByInput!]! = [], take: Int, skip: Int! = 0): [ExchangeRateProvider!]
  exchangeRateProvider(where: ExchangeRateProviderWhereUniqueInput!): ExchangeRateProvider
  exchangeRateProvidersCount(where: ExchangeRateProviderWhereInput! = {}): Int
  expenseCategories(where: ExpenseCategoryWhereInput! = {}, orderBy: [ExpenseCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [ExpenseCategory!]
  expenseCategory(where: ExpenseCategoryWhereUniqueInput!): ExpenseCategory
  expenseCategoriesCount(where: ExpenseCategoryWhereInput! = {}): Int
  expenses(where: ExpenseWhereInput! = {}, orderBy: [ExpenseOrderByInput!]! = [], take: Int, skip: Int! = 0): [Expense!]
  expense(where: ExpenseWhereUniqueInput!): Expense
  expensesCount(where: ExpenseWhereInput! = {}): Int
  fileDisks(where: FileDiskWhereInput! = {}, orderBy: [FileDiskOrderByInput!]! = [], take: Int, skip: Int! = 0): [FileDisk!]
  fileDisk(where: FileDiskWhereUniqueInput!): FileDisk
  fileDisksCount(where: FileDiskWhereInput! = {}): Int
  invoiceItems(where: InvoiceItemWhereInput! = {}, orderBy: [InvoiceItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [InvoiceItem!]
  invoiceItem(where: InvoiceItemWhereUniqueInput!): InvoiceItem
  invoiceItemsCount(where: InvoiceItemWhereInput! = {}): Int
  invoices(where: InvoiceWhereInput! = {}, orderBy: [InvoiceOrderByInput!]! = [], take: Int, skip: Int! = 0): [Invoice!]
  invoice(where: InvoiceWhereUniqueInput!): Invoice
  invoicesCount(where: InvoiceWhereInput! = {}): Int
  items(where: ItemWhereInput! = {}, orderBy: [ItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [Item!]
  item(where: ItemWhereUniqueInput!): Item
  itemsCount(where: ItemWhereInput! = {}): Int
  mediaFiles(where: MediaWhereInput! = {}, orderBy: [MediaOrderByInput!]! = [], take: Int, skip: Int! = 0): [Media!]
  media(where: MediaWhereUniqueInput!): Media
  mediaFilesCount(where: MediaWhereInput! = {}): Int
  migrations(where: MigrationWhereInput! = {}, orderBy: [MigrationOrderByInput!]! = [], take: Int, skip: Int! = 0): [Migration!]
  migration(where: MigrationWhereUniqueInput!): Migration
  migrationsCount(where: MigrationWhereInput! = {}): Int
  modules(where: ModuleWhereInput! = {}, orderBy: [ModuleOrderByInput!]! = [], take: Int, skip: Int! = 0): [Module!]
  module(where: ModuleWhereUniqueInput!): Module
  modulesCount(where: ModuleWhereInput! = {}): Int
  notes(where: NoteWhereInput! = {}, orderBy: [NoteOrderByInput!]! = [], take: Int, skip: Int! = 0): [Note!]
  note(where: NoteWhereUniqueInput!): Note
  notesCount(where: NoteWhereInput! = {}): Int
  notifications(where: NotificationWhereInput! = {}, orderBy: [NotificationOrderByInput!]! = [], take: Int, skip: Int! = 0): [Notification!]
  notification(where: NotificationWhereUniqueInput!): Notification
  notificationsCount(where: NotificationWhereInput! = {}): Int
  paymentMethods(where: PaymentMethodWhereInput! = {}, orderBy: [PaymentMethodOrderByInput!]! = [], take: Int, skip: Int! = 0): [PaymentMethod!]
  paymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  paymentMethodsCount(where: PaymentMethodWhereInput! = {}): Int
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Payment!]
  payment(where: PaymentWhereUniqueInput!): Payment
  paymentsCount(where: PaymentWhereInput! = {}): Int
  permissions(where: PermissionWhereInput! = {}, orderBy: [PermissionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Permission!]
  permission(where: PermissionWhereUniqueInput!): Permission
  permissionsCount(where: PermissionWhereInput! = {}): Int
  personalAccessTokens(where: PersonalAccessTokenWhereInput! = {}, orderBy: [PersonalAccessTokenOrderByInput!]! = [], take: Int, skip: Int! = 0): [PersonalAccessToken!]
  personalAccessToken(where: PersonalAccessTokenWhereUniqueInput!): PersonalAccessToken
  personalAccessTokensCount(where: PersonalAccessTokenWhereInput! = {}): Int
  recurringInvoices(where: RecurringInvoiceWhereInput! = {}, orderBy: [RecurringInvoiceOrderByInput!]! = [], take: Int, skip: Int! = 0): [RecurringInvoice!]
  recurringInvoice(where: RecurringInvoiceWhereUniqueInput!): RecurringInvoice
  recurringInvoicesCount(where: RecurringInvoiceWhereInput! = {}): Int
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  settings(where: SettingWhereInput! = {}, orderBy: [SettingOrderByInput!]! = [], take: Int, skip: Int! = 0): [Setting!]
  setting(where: SettingWhereUniqueInput!): Setting
  settingsCount(where: SettingWhereInput! = {}): Int
  taxTypes(where: TaxTypeWhereInput! = {}, orderBy: [TaxTypeOrderByInput!]! = [], take: Int, skip: Int! = 0): [TaxType!]
  taxType(where: TaxTypeWhereUniqueInput!): TaxType
  taxTypesCount(where: TaxTypeWhereInput! = {}): Int
  taxes(where: TaxWhereInput! = {}, orderBy: [TaxOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tax!]
  tax(where: TaxWhereUniqueInput!): Tax
  taxesCount(where: TaxWhereInput! = {}): Int
  transactions(where: TransactionWhereInput! = {}, orderBy: [TransactionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Transaction!]
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactionsCount(where: TransactionWhereInput! = {}): Int
  units(where: UnitWhereInput! = {}, orderBy: [UnitOrderByInput!]! = [], take: Int, skip: Int! = 0): [Unit!]
  unit(where: UnitWhereUniqueInput!): Unit
  unitsCount(where: UnitWhereInput! = {}): Int
  userCompanies(where: UserCompanyWhereInput! = {}, orderBy: [UserCompanyOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserCompany!]
  userCompany(where: UserCompanyWhereUniqueInput!): UserCompany
  userCompaniesCount(where: UserCompanyWhereInput! = {}): Int
  userSettings(where: UserSettingWhereInput! = {}, orderBy: [UserSettingOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserSetting!]
  userSetting(where: UserSettingWhereUniqueInput!): UserSetting
  userSettingsCount(where: UserSettingWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
