// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Ability {
  id          BigInt       @id @default(autoincrement())
  name        String       @default("")
  title       String       @default("")
  entityId    BigInt?
  entityType  String       @default("")
  onlyOwned   Boolean      @default(false)
  options     String       @default("")
  scope       Int?
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @default(now()) @updatedAt
  permissions Permission[] @relation("Permission_ability")
}

model Address {
  id              BigInt    @id @default(autoincrement())
  name            String    @default("")
  addressStreet_1 String    @default("")
  addressStreet_2 String    @default("")
  city            String    @default("")
  state           String    @default("")
  zip             String    @default("")
  phone           String    @default("")
  fax             String    @default("")
  type            String    @default("")
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @default(now()) @updatedAt
  company         Company?  @relation("Address_company", fields: [companyId], references: [id])
  companyId       Int?      @map("company")
  country         Country?  @relation("Address_country", fields: [countryId], references: [id])
  countryId       Int?      @map("country")
  customer        Customer? @relation("Address_customer", fields: [customerId], references: [id])
  customerId      BigInt?   @map("customer")
  user            User?     @relation("Address_user", fields: [userId], references: [id])
  userId          Int?      @map("user")

  @@index([companyId])
  @@index([countryId])
  @@index([customerId])
  @@index([userId])
}

model AssignedRole {
  id               BigInt  @id @default(autoincrement())
  entityId         BigInt?
  entityType       String  @default("")
  restrictedToId   BigInt?
  restrictedToType String  @default("")
  scope            Int?
  role             Role?   @relation("AssignedRole_role", fields: [roleId], references: [id])
  roleId           BigInt? @map("role")

  @@index([roleId])
}

model Company {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @default("")
  logo                  String                 @default("")
  uniqueHash            String                 @default("")
  createdAt             DateTime?              @default(now())
  updatedAt             DateTime?              @default(now()) @updatedAt
  slug                  String                 @default("")
  user                  User?                  @relation("Company_user", fields: [userId], references: [id])
  userId                Int?                   @map("user")
  addresses             Address[]              @relation("Address_company")
  companySettings       CompanySetting[]       @relation("CompanySetting_company")
  customFieldValues     CustomFieldValue[]     @relation("CustomFieldValue_company")
  customFields          CustomField[]          @relation("CustomField_company")
  customers             Customer[]             @relation("Customer_company")
  estimateItems         EstimateItem[]         @relation("EstimateItem_company")
  estimates             Estimate[]             @relation("Estimate_company")
  exchangeRateLogs      ExchangeRateLog[]      @relation("ExchangeRateLog_company")
  exchangeRateProviders ExchangeRateProvider[] @relation("ExchangeRateProvider_company")
  expenseCategories     ExpenseCategory[]      @relation("ExpenseCategory_company")
  expenses              Expense[]              @relation("Expense_company")
  invoiceItems          InvoiceItem[]          @relation("InvoiceItem_company")
  invoices              Invoice[]              @relation("Invoice_company")
  items                 Item[]                 @relation("Item_company")
  notes                 Note[]                 @relation("Note_company")
  paymentMethods        PaymentMethod[]        @relation("PaymentMethod_company")
  payments              Payment[]              @relation("Payment_company")
  recurringInvoices     RecurringInvoice[]     @relation("RecurringInvoice_company")
  taxTypes              TaxType[]              @relation("TaxType_company")
  taxes                 Tax[]                  @relation("Tax_company")
  transactions          Transaction[]          @relation("Transaction_company")
  units                 Unit[]                 @relation("Unit_company")
  userCompany           UserCompany[]          @relation("UserCompany_company")

  @@index([userId])
}

model CompanySetting {
  id        Int       @id @default(autoincrement())
  option    String    @default("")
  value     String    @default("")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  company   Company?  @relation("CompanySetting_company", fields: [companyId], references: [id])
  companyId Int?      @map("company")

  @@index([companyId])
}

model Country {
  id        Int       @id @default(autoincrement())
  code      String    @default("")
  name      String    @default("")
  phonecode Int?
  addresses Address[] @relation("Address_country")
}

model Currency {
  id                                                         Int                @id @default(autoincrement())
  name                                                       String             @default("")
  code                                                       String             @default("")
  symbol                                                     String             @default("")
  precision                                                  Int?
  thousandSeparator                                          String             @default("")
  decimalSeparator                                           String             @default("")
  swapCurrencySymbol                                         Boolean            @default(false)
  createdAt                                                  DateTime?          @default(now())
  updatedAt                                                  DateTime?          @default(now()) @updatedAt
  customers                                                  Customer[]         @relation("Customer_currency")
  estimates                                                  Estimate[]         @relation("Estimate_currency")
  exchangeRateLogsCurrenciesToexchangeRateLogsBaseCurrencyId ExchangeRateLog[]  @relation("ExchangeRateLog_currenciesCurrenciesToexchangeRateLogsBaseCurrencyId")
  exchangeRateLogsCurrenciesToexchangeRateLogsCurrencyId     ExchangeRateLog[]  @relation("ExchangeRateLog_currenciesCurrenciesToexchangeRateLogsCurrencyId")
  invoices                                                   Invoice[]          @relation("Invoice_currency")
  items                                                      Item[]             @relation("Item_currency")
  payments                                                   Payment[]          @relation("Payment_currency")
  recurringInvoices                                          RecurringInvoice[] @relation("RecurringInvoice_currency")
  taxes                                                      Tax[]              @relation("Tax_currency")
  users                                                      User[]             @relation("User_currency")
}

model CustomFieldValue {
  id                      BigInt       @id @default(autoincrement())
  customFieldValuableType String       @default("")
  customFieldValuableId   Int?
  type                    String       @default("")
  booleanAnswer           Boolean      @default(false)
  dateAnswer              DateTime?
  timeAnswer              DateTime?
  stringAnswer            String       @default("")
  numberAnswer            BigInt?
  dateTimeAnswer          DateTime?
  createdAt               DateTime?    @default(now())
  updatedAt               DateTime?    @default(now()) @updatedAt
  company                 Company?     @relation("CustomFieldValue_company", fields: [companyId], references: [id])
  companyId               Int?         @map("company")
  customField             CustomField? @relation("CustomFieldValue_customField", fields: [customFieldId], references: [id])
  customFieldId           BigInt?      @map("customField")

  @@index([companyId])
  @@index([customFieldId])
}

model CustomField {
  id                BigInt             @id @default(autoincrement())
  name              String             @default("")
  slug              String             @default("")
  label             String             @default("")
  modelType         String             @default("")
  type              String             @default("")
  placeholder       String             @default("")
  options           String             @default("")
  booleanAnswer     Boolean            @default(false)
  dateAnswer        DateTime?
  timeAnswer        DateTime?
  stringAnswer      String             @default("")
  numberAnswer      BigInt?
  dateTimeAnswer    DateTime?
  isRequired        Boolean            @default(false)
  order             BigInt?
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @default(now()) @updatedAt
  company           Company?           @relation("CustomField_company", fields: [companyId], references: [id])
  companyId         Int?               @map("company")
  customFieldValues CustomFieldValue[] @relation("CustomFieldValue_customField")

  @@index([companyId])
}

model Customer {
  id                BigInt             @id @default(autoincrement())
  prefix            String             @default("")
  name              String             @default("")
  email             String             @default("")
  phone             String             @default("")
  password          String             @default("")
  rememberToken     String             @default("")
  facebookId        String             @default("")
  googleId          String             @default("")
  githubId          String             @default("")
  contactName       String             @default("")
  companyName       String             @default("")
  website           String             @default("")
  enablePortal      Boolean            @default(false)
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @default(now()) @updatedAt
  company           Company?           @relation("Customer_company", fields: [companyId], references: [id])
  companyId         Int?               @map("company")
  user              User?              @relation("Customer_user", fields: [userId], references: [id])
  userId            Int?               @map("user")
  currency          Currency?          @relation("Customer_currency", fields: [currencyId], references: [id])
  currencyId        Int?               @map("currency")
  addresses         Address[]          @relation("Address_customer")
  estimates         Estimate[]         @relation("Estimate_customer")
  invoices          Invoice[]          @relation("Invoice_customer")
  payments          Payment[]          @relation("Payment_customer")
  recurringInvoices RecurringInvoice[] @relation("RecurringInvoice_customer")

  @@index([companyId])
  @@index([userId])
  @@index([currencyId])
}

model EmailLog {
  id           BigInt    @id @default(autoincrement())
  from         String    @default("")
  to           String    @default("")
  subject      String    @default("")
  body         String    @default("")
  mailableType String    @default("")
  mailableId   String    @default("")
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @default(now()) @updatedAt
  token        String    @default("")
}

model EstimateItem {
  id              Int       @id @default(autoincrement())
  name            String    @default("")
  description     String    @default("")
  discountType    String    @default("")
  quantity        Decimal?  @postgresql.Decimal(18, 4)
  unitName        String    @default("")
  discount        Decimal?  @postgresql.Decimal(18, 4)
  discountVal     BigInt?
  price           BigInt?
  tax             BigInt?
  total           BigInt?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @default(now()) @updatedAt
  exchangeRate    Decimal?  @postgresql.Decimal(18, 4)
  baseDiscountVal BigInt?
  basePrice       BigInt?
  baseTax         BigInt?
  baseTotal       BigInt?
  company         Company?  @relation("EstimateItem_company", fields: [companyId], references: [id])
  companyId       Int?      @map("company")
  estimate        Estimate? @relation("EstimateItem_estimate", fields: [estimateId], references: [id])
  estimateId      Int?      @map("estimate")
  item            Item?     @relation("EstimateItem_item", fields: [itemId], references: [id])
  itemId          Int?      @map("item")
  taxes           Tax[]     @relation("Tax_estimateItem")

  @@index([companyId])
  @@index([estimateId])
  @@index([itemId])
}

model Estimate {
  id                     Int            @id @default(autoincrement())
  sequenceNumber         Int?
  customerSequenceNumber Int?
  estimateDate           DateTime?
  expiryDate             DateTime?
  estimateNumber         String         @default("")
  status                 String         @default("")
  referenceNumber        String         @default("")
  taxPerItem             String         @default("")
  discountPerItem        String         @default("")
  notes                  String         @default("")
  discount               Decimal?       @postgresql.Decimal(18, 4)
  discountType           String         @default("")
  discountVal            BigInt?
  subTotal               BigInt?
  total                  BigInt?
  tax                    BigInt?
  uniqueHash             String         @default("")
  createdAt              DateTime?      @default(now())
  updatedAt              DateTime?      @default(now()) @updatedAt
  templateName           String         @default("")
  exchangeRate           Decimal?       @postgresql.Decimal(18, 4)
  baseDiscountVal        BigInt?
  baseSubTotal           BigInt?
  baseTotal              BigInt?
  baseTax                BigInt?
  salesTaxType           String         @default("")
  salesTaxAddressType    String         @default("")
  company                Company?       @relation("Estimate_company", fields: [companyId], references: [id])
  companyId              Int?           @map("company")
  user                   User?          @relation("Estimate_user", fields: [userId], references: [id])
  userId                 Int?           @map("user")
  currency               Currency?      @relation("Estimate_currency", fields: [currencyId], references: [id])
  currencyId             Int?           @map("currency")
  customer               Customer?      @relation("Estimate_customer", fields: [customerId], references: [id])
  customerId             BigInt?        @map("customer")
  estimateItems          EstimateItem[] @relation("EstimateItem_estimate")
  taxes                  Tax[]          @relation("Tax_estimate")

  @@index([companyId])
  @@index([userId])
  @@index([currencyId])
  @@index([customerId])
}

model ExchangeRateLog {
  id                                                     BigInt    @id @default(autoincrement())
  exchangeRate                                           Decimal?  @postgresql.Decimal(18, 4)
  createdAt                                              DateTime? @default(now())
  updatedAt                                              DateTime? @default(now()) @updatedAt
  currenciesCurrenciesToexchangeRateLogsBaseCurrencyId   Currency? @relation("ExchangeRateLog_currenciesCurrenciesToexchangeRateLogsBaseCurrencyId", fields: [currenciesCurrenciesToexchangeRateLogsBaseCurrencyIdId], references: [id])
  currenciesCurrenciesToexchangeRateLogsBaseCurrencyIdId Int?      @map("currenciesCurrenciesToexchangeRateLogsBaseCurrencyId")
  company                                                Company?  @relation("ExchangeRateLog_company", fields: [companyId], references: [id])
  companyId                                              Int?      @map("company")
  currenciesCurrenciesToexchangeRateLogsCurrencyId       Currency? @relation("ExchangeRateLog_currenciesCurrenciesToexchangeRateLogsCurrencyId", fields: [currenciesCurrenciesToexchangeRateLogsCurrencyIdId], references: [id])
  currenciesCurrenciesToexchangeRateLogsCurrencyIdId     Int?      @map("currenciesCurrenciesToexchangeRateLogsCurrencyId")

  @@index([currenciesCurrenciesToexchangeRateLogsBaseCurrencyIdId])
  @@index([companyId])
  @@index([currenciesCurrenciesToexchangeRateLogsCurrencyIdId])
}

model ExchangeRateProvider {
  id           BigInt    @id @default(autoincrement())
  driver       String    @default("")
  key          String    @default("")
  currencies   String    @default("")
  driverConfig String    @default("")
  active       Boolean   @default(true)
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @default(now()) @updatedAt
  company      Company?  @relation("ExchangeRateProvider_company", fields: [companyId], references: [id])
  companyId    Int?      @map("company")

  @@index([companyId])
}

model ExpenseCategory {
  id          Int       @id @default(autoincrement())
  name        String    @default("")
  description String    @default("")
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now()) @updatedAt
  company     Company?  @relation("ExpenseCategory_company", fields: [companyId], references: [id])
  companyId   Int?      @map("company")
  expenses    Expense[] @relation("Expense_expenseCategory")

  @@index([companyId])
}

model Expense {
  id                Int              @id @default(autoincrement())
  expenseDate       DateTime?
  attachmentReceipt String           @default("")
  amount            BigInt?
  notes             String           @default("")
  createdAt         DateTime?        @default(now())
  updatedAt         DateTime?        @default(now()) @updatedAt
  customerId        BigInt?
  exchangeRate      Decimal?         @postgresql.Decimal(18, 4)
  baseAmount        BigInt?
  currencyId        Int?
  company           Company?         @relation("Expense_company", fields: [companyId], references: [id])
  companyId         Int?             @map("company")
  user              User?            @relation("Expense_user", fields: [userId], references: [id])
  userId            Int?             @map("user")
  expenseCategory   ExpenseCategory? @relation("Expense_expenseCategory", fields: [expenseCategoryId], references: [id])
  expenseCategoryId Int?             @map("expenseCategory")
  paymentMethod     PaymentMethod?   @relation("Expense_paymentMethod", fields: [paymentMethodId], references: [id])
  paymentMethodId   Int?             @map("paymentMethod")

  @@index([companyId])
  @@index([userId])
  @@index([expenseCategoryId])
  @@index([paymentMethodId])
}

model FileDisk {
  id           BigInt    @id @default(autoincrement())
  name         String    @default("")
  type         String    @default("REMOTE")
  driver       String    @default("")
  setAsDefault Boolean   @default(false)
  credentials  String    @default("")
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @default(now()) @updatedAt
}

model InvoiceItem {
  id                 Int               @id @default(autoincrement())
  name               String            @default("")
  description        String            @default("")
  discountType       String            @default("")
  price              BigInt?
  quantity           Decimal?          @postgresql.Decimal(18, 4)
  unitName           String            @default("")
  discount           Decimal?          @postgresql.Decimal(18, 4)
  discountVal        BigInt?
  tax                BigInt?
  total              BigInt?
  createdAt          DateTime?         @default(now())
  updatedAt          DateTime?         @default(now()) @updatedAt
  basePrice          BigInt?
  exchangeRate       Decimal?          @postgresql.Decimal(18, 4)
  baseDiscountVal    BigInt?
  baseTax            BigInt?
  baseTotal          BigInt?
  company            Company?          @relation("InvoiceItem_company", fields: [companyId], references: [id])
  companyId          Int?              @map("company")
  invoice            Invoice?          @relation("InvoiceItem_invoice", fields: [invoiceId], references: [id])
  invoiceId          Int?              @map("invoice")
  item               Item?             @relation("InvoiceItem_item", fields: [itemId], references: [id])
  itemId             Int?              @map("item")
  recurringInvoice   RecurringInvoice? @relation("InvoiceItem_recurringInvoice", fields: [recurringInvoiceId], references: [id])
  recurringInvoiceId BigInt?           @map("recurringInvoice")
  taxes              Tax[]             @relation("Tax_invoiceItem")

  @@index([companyId])
  @@index([invoiceId])
  @@index([itemId])
  @@index([recurringInvoiceId])
}

model Invoice {
  id                     Int               @id @default(autoincrement())
  sequenceNumber         Int?
  customerSequenceNumber Int?
  invoiceDate            DateTime?
  dueDate                DateTime?
  invoiceNumber          String            @default("")
  referenceNumber        String            @default("")
  status                 String            @default("")
  paidStatus             String            @default("")
  taxPerItem             String            @default("")
  discountPerItem        String            @default("")
  notes                  String            @default("")
  discountType           String            @default("")
  discount               Decimal?          @postgresql.Decimal(18, 4)
  discountVal            BigInt?
  subTotal               BigInt?
  total                  BigInt?
  tax                    BigInt?
  dueAmount              BigInt?
  sent                   Boolean           @default(false)
  viewed                 Boolean           @default(false)
  uniqueHash             String            @default("")
  createdAt              DateTime?         @default(now())
  updatedAt              DateTime?         @default(now()) @updatedAt
  templateName           String            @default("")
  exchangeRate           Decimal?          @postgresql.Decimal(18, 4)
  baseDiscountVal        BigInt?
  baseSubTotal           BigInt?
  baseTotal              BigInt?
  baseTax                BigInt?
  baseDueAmount          BigInt?
  salesTaxType           String            @default("")
  salesTaxAddressType    String            @default("")
  overdue                Boolean           @default(false)
  company                Company?          @relation("Invoice_company", fields: [companyId], references: [id])
  companyId              Int?              @map("company")
  user                   User?             @relation("Invoice_user", fields: [userId], references: [id])
  userId                 Int?              @map("user")
  currency               Currency?         @relation("Invoice_currency", fields: [currencyId], references: [id])
  currencyId             Int?              @map("currency")
  customer               Customer?         @relation("Invoice_customer", fields: [customerId], references: [id])
  customerId             BigInt?           @map("customer")
  recurringInvoice       RecurringInvoice? @relation("Invoice_recurringInvoice", fields: [recurringInvoiceId], references: [id])
  recurringInvoiceId     BigInt?           @map("recurringInvoice")
  invoiceItems           InvoiceItem[]     @relation("InvoiceItem_invoice")
  payments               Payment[]         @relation("Payment_invoice")
  taxes                  Tax[]             @relation("Tax_invoice")
  transactions           Transaction[]     @relation("Transaction_invoice")

  @@index([companyId])
  @@index([userId])
  @@index([currencyId])
  @@index([customerId])
  @@index([recurringInvoiceId])
}

model Item {
  id            Int            @id @default(autoincrement())
  name          String         @default("")
  description   String         @default("")
  price         BigInt?
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @default(now()) @updatedAt
  taxPerItem    Boolean        @default(false)
  company       Company?       @relation("Item_company", fields: [companyId], references: [id])
  companyId     Int?           @map("company")
  user          User?          @relation("Item_user", fields: [userId], references: [id])
  userId        Int?           @map("user")
  currency      Currency?      @relation("Item_currency", fields: [currencyId], references: [id])
  currencyId    Int?           @map("currency")
  unit          Unit?          @relation("Item_unit", fields: [unitId], references: [id])
  unitId        Int?           @map("unit")
  estimateItems EstimateItem[] @relation("EstimateItem_item")
  invoiceItems  InvoiceItem[]  @relation("InvoiceItem_item")
  taxes         Tax[]          @relation("Tax_item")

  @@index([companyId])
  @@index([userId])
  @@index([currencyId])
  @@index([unitId])
}

model Media {
  id               BigInt    @id @default(autoincrement())
  modelType        String    @default("")
  modelId          BigInt?
  collectionName   String    @default("")
  name             String    @default("")
  fileName         String    @default("")
  mimeType         String    @default("")
  disk             String    @default("")
  size             Int?
  manipulations    String    @default("")
  customProperties String    @default("")
  responsiveImages String    @default("")
  orderColumn      Int?
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @default(now()) @updatedAt
  uuid             String    @default("")
  conversionsDisk  String    @default("")
}

model Migration {
  id        Int    @id @default(autoincrement())
  migration String @default("")
  batch     Int?
}

model Module {
  id        BigInt    @id @default(autoincrement())
  name      String    @default("")
  version   String    @default("")
  installed Boolean   @default(false)
  enabled   Boolean   @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
}

model Note {
  id        BigInt    @id @default(autoincrement())
  type      String    @default("")
  name      String    @default("")
  notes     String    @default("")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  company   Company?  @relation("Note_company", fields: [companyId], references: [id])
  companyId Int?      @map("company")

  @@index([companyId])
}

model Notification {
  id             String    @id @default(cuid())
  type           String    @default("")
  notifiableType String    @default("")
  notifiableId   BigInt?
  data           String    @default("")
  readAt         DateTime?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @default(now()) @updatedAt
}

model PaymentMethod {
  id         Int       @id @default(autoincrement())
  name       String    @default("")
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @default(now()) @updatedAt
  driver     String    @default("")
  type       String?   @default("GENERAL")
  settings   String    @default("")
  active     Boolean   @default(false)
  useTestEnv Boolean   @default(false)
  company    Company?  @relation("PaymentMethod_company", fields: [companyId], references: [id])
  companyId  Int?      @map("company")
  expenses   Expense[] @relation("Expense_paymentMethod")
  payments   Payment[] @relation("Payment_paymentMethod")

  @@index([companyId])
}

model Payment {
  id                     BigInt         @id @default(autoincrement())
  sequenceNumber         Int?
  customerSequenceNumber Int?
  paymentNumber          String         @default("")
  paymentDate            DateTime?
  notes                  String         @default("")
  amount                 BigInt?
  uniqueHash             String         @default("")
  createdAt              DateTime?      @default(now())
  updatedAt              DateTime?      @default(now()) @updatedAt
  exchangeRate           Decimal?       @postgresql.Decimal(18, 4)
  baseAmount             BigInt?
  company                Company?       @relation("Payment_company", fields: [companyId], references: [id])
  companyId              Int?           @map("company")
  user                   User?          @relation("Payment_user", fields: [userId], references: [id])
  userId                 Int?           @map("user")
  currency               Currency?      @relation("Payment_currency", fields: [currencyId], references: [id])
  currencyId             Int?           @map("currency")
  customer               Customer?      @relation("Payment_customer", fields: [customerId], references: [id])
  customerId             BigInt?        @map("customer")
  invoice                Invoice?       @relation("Payment_invoice", fields: [invoiceId], references: [id])
  invoiceId              Int?           @map("invoice")
  paymentMethod          PaymentMethod? @relation("Payment_paymentMethod", fields: [paymentMethodId], references: [id])
  paymentMethodId        Int?           @map("paymentMethod")
  transaction            Transaction?   @relation("Payment_transaction", fields: [transactionId], references: [id])
  transactionId          BigInt?        @map("transaction")

  @@index([companyId])
  @@index([userId])
  @@index([currencyId])
  @@index([customerId])
  @@index([invoiceId])
  @@index([paymentMethodId])
  @@index([transactionId])
}

model Permission {
  id         BigInt   @id @default(autoincrement())
  entityId   BigInt?
  entityType String   @default("")
  forbidden  Boolean  @default(false)
  scope      Int?
  ability    Ability? @relation("Permission_ability", fields: [abilityId], references: [id])
  abilityId  BigInt?  @map("ability")

  @@index([abilityId])
}

model PersonalAccessToken {
  id            BigInt    @id @default(autoincrement())
  tokenableType String    @default("")
  tokenableId   BigInt?
  name          String    @default("")
  token         String    @default("")
  abilities     String    @default("")
  lastUsedAt    DateTime?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @default(now()) @updatedAt
}

model RecurringInvoice {
  id                  BigInt        @id @default(autoincrement())
  startsAt            DateTime?
  sendAutomatically   Boolean       @default(false)
  status              String?       @default("ACTIVE")
  nextInvoiceAt       DateTime?
  frequency           String        @default("")
  limitBy             String?       @default("NONE")
  limitCount          Int?
  limitDate           DateTime?
  exchangeRate        Decimal?      @postgresql.Decimal(18, 4)
  taxPerItem          String        @default("")
  discountPerItem     String        @default("")
  notes               String        @default("")
  discountType        String        @default("")
  discount            Decimal?      @postgresql.Decimal(18, 4)
  discountVal         BigInt?
  subTotal            BigInt?
  total               BigInt?
  tax                 BigInt?
  templateName        String        @default("")
  dueAmount           BigInt?
  createdAt           DateTime?     @default(now())
  updatedAt           DateTime?     @default(now()) @updatedAt
  salesTaxType        String        @default("")
  salesTaxAddressType String        @default("")
  company             Company?      @relation("RecurringInvoice_company", fields: [companyId], references: [id])
  companyId           Int?          @map("company")
  user                User?         @relation("RecurringInvoice_user", fields: [userId], references: [id])
  userId              Int?          @map("user")
  currency            Currency?     @relation("RecurringInvoice_currency", fields: [currencyId], references: [id])
  currencyId          Int?          @map("currency")
  customer            Customer?     @relation("RecurringInvoice_customer", fields: [customerId], references: [id])
  customerId          BigInt?       @map("customer")
  invoiceItems        InvoiceItem[] @relation("InvoiceItem_recurringInvoice")
  invoices            Invoice[]     @relation("Invoice_recurringInvoice")
  taxes               Tax[]         @relation("Tax_recurringInvoice")

  @@index([companyId])
  @@index([userId])
  @@index([currencyId])
  @@index([customerId])
}

model Role {
  id            BigInt         @id @default(autoincrement())
  name          String         @default("")
  title         String         @default("")
  level         Int?
  scope         Int?
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @default(now()) @updatedAt
  assignedRoles AssignedRole[] @relation("AssignedRole_role")
}

model Setting {
  id        Int       @id @default(autoincrement())
  option    String    @default("")
  value     String    @default("")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
}

model TaxType {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  percent       Decimal?  @postgresql.Decimal(18, 4)
  compoundTax   Int?      @default(0)
  collectiveTax Int?      @default(0)
  description   String    @default("")
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @default(now()) @updatedAt
  type          String?   @default("GENERAL")
  company       Company?  @relation("TaxType_company", fields: [companyId], references: [id])
  companyId     Int?      @map("company")
  taxes         Tax[]     @relation("Tax_taxType")

  @@index([companyId])
}

model Tax {
  id                 Int               @id @default(autoincrement())
  name               String            @default("")
  amount             BigInt?
  percent            Decimal?          @postgresql.Decimal(18, 4)
  compoundTax        Int?              @default(0)
  createdAt          DateTime?         @default(now())
  updatedAt          DateTime?         @default(now()) @updatedAt
  exchangeRate       Decimal?          @postgresql.Decimal(18, 4)
  baseAmount         BigInt?
  company            Company?          @relation("Tax_company", fields: [companyId], references: [id])
  companyId          Int?              @map("company")
  currency           Currency?         @relation("Tax_currency", fields: [currencyId], references: [id])
  currencyId         Int?              @map("currency")
  estimate           Estimate?         @relation("Tax_estimate", fields: [estimateId], references: [id])
  estimateId         Int?              @map("estimate")
  estimateItem       EstimateItem?     @relation("Tax_estimateItem", fields: [estimateItemId], references: [id])
  estimateItemId     Int?              @map("estimateItem")
  invoice            Invoice?          @relation("Tax_invoice", fields: [invoiceId], references: [id])
  invoiceId          Int?              @map("invoice")
  invoiceItem        InvoiceItem?      @relation("Tax_invoiceItem", fields: [invoiceItemId], references: [id])
  invoiceItemId      Int?              @map("invoiceItem")
  item               Item?             @relation("Tax_item", fields: [itemId], references: [id])
  itemId             Int?              @map("item")
  recurringInvoice   RecurringInvoice? @relation("Tax_recurringInvoice", fields: [recurringInvoiceId], references: [id])
  recurringInvoiceId BigInt?           @map("recurringInvoice")
  taxType            TaxType?          @relation("Tax_taxType", fields: [taxTypeId], references: [id])
  taxTypeId          Int?              @map("taxType")

  @@index([companyId])
  @@index([currencyId])
  @@index([estimateId])
  @@index([estimateItemId])
  @@index([invoiceId])
  @@index([invoiceItemId])
  @@index([itemId])
  @@index([recurringInvoiceId])
  @@index([taxTypeId])
}

model Transaction {
  id              BigInt    @id @default(autoincrement())
  transactionId   String    @default("")
  uniqueHash      String    @default("")
  type            String    @default("")
  status          String    @default("")
  transactionDate DateTime?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @default(now()) @updatedAt
  company         Company?  @relation("Transaction_company", fields: [companyId], references: [id])
  companyId       Int?      @map("company")
  invoice         Invoice?  @relation("Transaction_invoice", fields: [invoiceId], references: [id])
  invoiceId       Int?      @map("invoice")
  payments        Payment[] @relation("Payment_transaction")

  @@index([companyId])
  @@index([invoiceId])
}

model Unit {
  id        Int       @id @default(autoincrement())
  name      String    @default("")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  company   Company?  @relation("Unit_company", fields: [companyId], references: [id])
  companyId Int?      @map("company")
  items     Item[]    @relation("Item_unit")

  @@index([companyId])
}

model UserCompany {
  id        BigInt    @id @default(autoincrement())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  company   Company?  @relation("UserCompany_company", fields: [companyId], references: [id])
  companyId Int?      @map("company")
  user      User?     @relation("UserCompany_user", fields: [userId], references: [id])
  userId    Int?      @map("user")

  @@index([companyId])
  @@index([userId])
}

model UserSetting {
  id        BigInt    @id @default(autoincrement())
  key       String    @default("")
  value     String    @default("")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  user      User?     @relation("UserSetting_user", fields: [userId], references: [id])
  userId    Int?      @map("user")

  @@index([userId])
}

model User {
  id                Int                @id @default(autoincrement())
  name              String             @default("")
  isAdmin           Boolean            @default(false)
  email             String             @unique @default("")
  phone             String             @default("")
  password          String?
  role              String             @default("user")
  rememberToken     String             @default("")
  facebookId        String             @default("")
  googleId          String             @default("")
  githubId          String             @default("")
  contactName       String             @default("")
  companyName       String             @default("")
  website           String             @default("")
  enablePortal      Boolean            @default(false)
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @default(now()) @updatedAt
  user              User?              @relation("User_user", fields: [userId], references: [id])
  userId            Int?               @map("user")
  currency          Currency?          @relation("User_currency", fields: [currencyId], references: [id])
  currencyId        Int?               @map("currency")
  addresses         Address[]          @relation("Address_user")
  companies         Company[]          @relation("Company_user")
  customers         Customer[]         @relation("Customer_user")
  estimates         Estimate[]         @relation("Estimate_user")
  expenses          Expense[]          @relation("Expense_user")
  invoices          Invoice[]          @relation("Invoice_user")
  items             Item[]             @relation("Item_user")
  payments          Payment[]          @relation("Payment_user")
  recurringInvoices RecurringInvoice[] @relation("RecurringInvoice_user")
  userCompany       UserCompany[]      @relation("UserCompany_user")
  userSettings      UserSetting[]      @relation("UserSetting_user")
  otherUsers        User[]             @relation("User_user")

  @@index([userId])
  @@index([currencyId])
}
