datasource mysql {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Ability {
  id          BigInt       @id @default(autoincrement())
  name        String
  title       String?
  entityId    BigInt?      @map("entity_id")
  entityType  String?      @map("entity_type")
  onlyOwned   Boolean      @default(false) @map("only_owned")
  options     String?
  scope       Int?
  createdAt   DateTime?    @map("created_at")
  updatedAt   DateTime?    @updatedAt @map("updated_at")
  permissions Permission[] @relation("abilitiesTopermissions")

  @@map("abilities")
}

model Address {
  id             BigInt    @id @default(autoincrement())
  name           String?
  addressStreet1 String?   @map("address_street_1")
  addressStreet2 String?   @map("address_street_2")
  city           String?
  state          String?
  countryId      Int?      @map("country_id")
  zip            String?
  phone          String?
  fax            String?
  type           String?
  userId         Int?      @map("user_id")
  createdAt      DateTime? @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  companyId      Int?      @map("company_id")
  customerId     BigInt?   @map("customer_id")
  company        Company?  @relation("addressesTocompanies", fields: [companyId], references: [id], onDelete: Cascade)
  country        Country?  @relation("addressesTocountries", fields: [countryId], references: [id], onDelete: Restrict)
  customer       Customer? @relation("addressesTocustomers", fields: [customerId], references: [id], onDelete: Restrict)
  user           User?     @relation("addressesTousers", fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model AssignedRole {
  id               BigInt  @id @default(autoincrement())
  roleId           BigInt  @map("role_id")
  entityId         BigInt  @map("entity_id")
  entityType       String  @map("entity_type")
  restrictedToId   BigInt? @map("restricted_to_id")
  restrictedToType String? @map("restricted_to_type")
  scope            Int?
  role             Role    @relation("assigned_rolesToroles", fields: [roleId], references: [id], onDelete: Cascade)

  @@map("assigned_roles")
}

model Company {
  id                    Int                    @id @default(autoincrement())
  name                  String
  logo                  String?
  uniqueHash            String?                @map("unique_hash")
  createdAt             DateTime?              @map("created_at")
  updatedAt             DateTime?              @updatedAt @map("updated_at")
  slug                  String?
  ownerId               Int?                   @map("owner_id")
  user                  User?                  @relation("companiesTousers", fields: [ownerId], references: [id], onDelete: Restrict)
  addresses             Address[]              @relation("addressesTocompanies")
  companySettings       CompanySetting[]       @relation("companiesTocompany_settings")
  customFieldValues     CustomFieldValue[]     @relation("companiesTocustom_field_values")
  customFields          CustomField[]          @relation("companiesTocustom_fields")
  customers             Customer[]             @relation("companiesTocustomers")
  estimateItems         EstimateItem[]         @relation("companiesToestimate_items")
  estimates             Estimate[]             @relation("companiesToestimates")
  exchangeRateLogs      ExchangeRateLog[]      @relation("companiesToexchange_rate_logs")
  exchangeRateProviders ExchangeRateProvider[] @relation("companiesToexchange_rate_providers")
  expenseCategories     ExpenseCategory[]      @relation("companiesToexpense_categories")
  expenses              Expense[]              @relation("companiesToexpenses")
  invoiceItems          InvoiceItem[]          @relation("companiesToinvoice_items")
  invoices              Invoice[]              @relation("companiesToinvoices")
  items                 Item[]                 @relation("companiesToitems")
  notes                 Note[]                 @relation("companiesTonotes")
  paymentMethods        PaymentMethod[]        @relation("companiesTopayment_methods")
  payments              Payment[]              @relation("companiesTopayments")
  recurringInvoices     RecurringInvoice[]     @relation("companiesTorecurring_invoices")
  taxTypes              TaxType[]              @relation("companiesTotax_types")
  taxes                 Tax[]                  @relation("companiesTotaxes")
  transactions          Transaction[]          @relation("companiesTotransactions")
  units                 Unit[]                 @relation("companiesTounits")
  userCompanies         UserCompany[]          @relation("companiesTouser_company")

  @@map("companies")
}

model CompanySetting {
  id        Int       @id @default(autoincrement())
  option    String
  value     String
  companyId Int?      @map("company_id")
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  company   Company?  @relation("companiesTocompany_settings", fields: [companyId], references: [id], onDelete: Restrict)

  @@map("company_settings")
}

model Country {
  id        Int       @id @default(autoincrement())
  code      String
  name      String
  phonecode Int
  addresses Address[] @relation("addressesTocountries")

  @@map("countries")
}

model Currency {
  id                                                          Int                @id @default(autoincrement())
  name                                                        String
  code                                                        String
  symbol                                                      String?
  precision                                                   Int
  thousandSeparator                                           String             @map("thousand_separator")
  decimalSeparator                                            String             @map("decimal_separator")
  swapCurrencySymbol                                          Boolean            @default(false) @map("swap_currency_symbol")
  createdAt                                                   DateTime?          @map("created_at")
  updatedAt                                                   DateTime?          @updatedAt @map("updated_at")
  customers                                                   Customer[]         @relation("currenciesTocustomers")
  estimates                                                   Estimate[]         @relation("currenciesToestimates")
  exchangeRateLogsCurrenciesToexchangeRateLogsBaseCurrencyIds ExchangeRateLog[]  @relation("currenciesToexchange_rate_logs_base_currency_id")
  exchangeRateLogsCurrenciesToexchangeRateLogsCurrencyIds     ExchangeRateLog[]  @relation("currenciesToexchange_rate_logs_currency_id")
  invoices                                                    Invoice[]          @relation("currenciesToinvoices")
  items                                                       Item[]             @relation("currenciesToitems")
  payments                                                    Payment[]          @relation("currenciesTopayments")
  recurringInvoices                                           RecurringInvoice[] @relation("currenciesTorecurring_invoices")
  taxes                                                       Tax[]              @relation("currenciesTotaxes")
  users                                                       User[]             @relation("currenciesTousers")

  @@map("currencies")
}

model CustomFieldValue {
  id                      BigInt      @id @default(autoincrement())
  customFieldValuableType String      @map("custom_field_valuable_type")
  customFieldValuableId   Int         @map("custom_field_valuable_id")
  type                    String
  booleanAnswer           Boolean?    @map("boolean_answer")
  dateAnswer              DateTime?   @map("date_answer")
  timeAnswer              DateTime?   @map("time_answer")
  stringAnswer            String?     @map("string_answer")
  numberAnswer            BigInt?     @map("number_answer")
  dateTimeAnswer          DateTime?   @map("date_time_answer")
  customFieldId           BigInt      @map("custom_field_id")
  companyId               Int         @map("company_id")
  createdAt               DateTime?   @map("created_at")
  updatedAt               DateTime?   @updatedAt @map("updated_at")
  company                 Company     @relation("companiesTocustom_field_values", fields: [companyId], references: [id])
  customField             CustomField @relation("custom_field_valuesTocustom_fields", fields: [customFieldId], references: [id])

  @@map("custom_field_values")
}

model CustomField {
  id                BigInt             @id @default(autoincrement())
  name              String
  slug              String
  label             String
  modelType         String             @map("model_type")
  type              String
  placeholder       String?
  options           String?
  booleanAnswer     Boolean?           @map("boolean_answer")
  dateAnswer        DateTime?          @map("date_answer")
  timeAnswer        DateTime?          @map("time_answer")
  stringAnswer      String?            @map("string_answer")
  numberAnswer      BigInt?            @map("number_answer")
  dateTimeAnswer    DateTime?          @map("date_time_answer")
  isRequired        Boolean            @default(false) @map("is_required")
  order             BigInt             @default("1")
  companyId         Int                @map("company_id")
  createdAt         DateTime?          @map("created_at")
  updatedAt         DateTime?          @updatedAt @map("updated_at")
  company           Company            @relation("companiesTocustom_fields", fields: [companyId], references: [id])
  customFieldValues CustomFieldValue[] @relation("custom_field_valuesTocustom_fields")

  @@map("custom_fields")
}

model Customer {
  id                BigInt             @id @default(autoincrement())
  prefix            String?
  name              String
  email             String?
  phone             String?
  password          String?
  rememberToken     String?            @map("remember_token")
  facebookId        String?            @map("facebook_id")
  googleId          String?            @map("google_id")
  githubId          String?            @map("github_id")
  contactName       String?            @map("contact_name")
  companyName       String?            @map("company_name")
  website           String?
  enablePortal      Boolean?           @default(false) @map("enable_portal")
  currencyId        Int?               @map("currency_id")
  companyId         Int?               @map("company_id")
  creatorId         Int?               @map("creator_id")
  createdAt         DateTime?          @map("created_at")
  updatedAt         DateTime?          @updatedAt @map("updated_at")
  company           Company?           @relation("companiesTocustomers", fields: [companyId], references: [id], onDelete: Restrict)
  user              User?              @relation("customersTousers", fields: [creatorId], references: [id], onDelete: Restrict)
  currency          Currency?          @relation("currenciesTocustomers", fields: [currencyId], references: [id], onDelete: Restrict)
  addresses         Address[]          @relation("addressesTocustomers")
  estimates         Estimate[]         @relation("customersToestimates")
  invoices          Invoice[]          @relation("customersToinvoices")
  payments          Payment[]          @relation("customersTopayments")
  recurringInvoices RecurringInvoice[] @relation("customersTorecurring_invoices")

  @@map("customers")
}

model EmailLog {
  id           BigInt    @id @default(autoincrement())
  from         String
  to           String
  subject      String
  body         String
  mailableType String    @map("mailable_type")
  mailableId   String    @map("mailable_id")
  createdAt    DateTime? @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  token        String?   @unique

  @@map("email_logs")
}

model EstimateItem {
  id              Int       @id @default(autoincrement())
  name            String
  description     String?
  discountType    String    @map("discount_type")
  quantity        Decimal
  unitName        String?   @map("unit_name")
  discount        Decimal?
  discountVal     BigInt?   @map("discount_val")
  price           BigInt
  tax             BigInt
  total           BigInt
  itemId          Int?      @map("item_id")
  estimateId      Int       @map("estimate_id")
  companyId       Int?      @map("company_id")
  createdAt       DateTime? @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")
  exchangeRate    Decimal?  @map("exchange_rate")
  baseDiscountVal BigInt?   @map("base_discount_val")
  basePrice       BigInt?   @map("base_price")
  baseTax         BigInt?   @map("base_tax")
  baseTotal       BigInt?   @map("base_total")
  company         Company?  @relation("companiesToestimate_items", fields: [companyId], references: [id], onDelete: Cascade)
  estimate        Estimate  @relation("estimate_itemsToestimates", fields: [estimateId], references: [id], onDelete: Cascade)
  item            Item?     @relation("estimate_itemsToitems", fields: [itemId], references: [id], onDelete: Cascade)
  taxes           Tax[]     @relation("estimate_itemsTotaxes")

  @@map("estimate_items")
}

model Estimate {
  id                     Int            @id @default(autoincrement())
  sequenceNumber         Int?           @map("sequence_number")
  customerSequenceNumber Int?           @map("customer_sequence_number")
  estimateDate           DateTime       @map("estimate_date")
  expiryDate             DateTime?      @map("expiry_date")
  estimateNumber         String         @map("estimate_number")
  status                 String
  referenceNumber        String?        @map("reference_number")
  taxPerItem             String         @map("tax_per_item")
  discountPerItem        String         @map("discount_per_item")
  notes                  String?
  discount               Decimal?
  discountType           String?        @map("discount_type")
  discountVal            BigInt?        @map("discount_val")
  subTotal               BigInt         @map("sub_total")
  total                  BigInt
  tax                    BigInt
  uniqueHash             String?        @map("unique_hash")
  companyId              Int?           @map("company_id")
  createdAt              DateTime?      @map("created_at")
  updatedAt              DateTime?      @updatedAt @map("updated_at")
  creatorId              Int?           @map("creator_id")
  templateName           String?        @map("template_name")
  customerId             BigInt?        @map("customer_id")
  exchangeRate           Decimal?       @map("exchange_rate")
  baseDiscountVal        BigInt?        @map("base_discount_val")
  baseSubTotal           BigInt?        @map("base_sub_total")
  baseTotal              BigInt?        @map("base_total")
  baseTax                BigInt?        @map("base_tax")
  currencyId             Int?           @map("currency_id")
  salesTaxType           String?        @map("sales_tax_type")
  salesTaxAddressType    String?        @map("sales_tax_address_type")
  company                Company?       @relation("companiesToestimates", fields: [companyId], references: [id], onDelete: Cascade)
  user                   User?          @relation("estimatesTousers", fields: [creatorId], references: [id], onDelete: Cascade)
  currency               Currency?      @relation("currenciesToestimates", fields: [currencyId], references: [id], onDelete: Restrict)
  customer               Customer?      @relation("customersToestimates", fields: [customerId], references: [id], onDelete: Restrict)
  estimateItems          EstimateItem[] @relation("estimate_itemsToestimates")
  taxes                  Tax[]          @relation("estimatesTotaxes")

  @@map("estimates")
}

model ExchangeRateLog {
  id                                                   BigInt    @id @default(autoincrement())
  companyId                                            Int?      @map("company_id")
  baseCurrencyId                                       Int?      @map("base_currency_id")
  currencyId                                           Int?      @map("currency_id")
  exchangeRate                                         Decimal?  @map("exchange_rate")
  createdAt                                            DateTime? @map("created_at")
  updatedAt                                            DateTime? @updatedAt @map("updated_at")
  currenciesCurrenciesToexchangeRateLogsBaseCurrencyId Currency? @relation("currenciesToexchange_rate_logs_base_currency_id", fields: [baseCurrencyId], references: [id], onDelete: Restrict)
  company                                              Company?  @relation("companiesToexchange_rate_logs", fields: [companyId], references: [id], onDelete: Restrict)
  currenciesCurrenciesToexchangeRateLogsCurrencyId     Currency? @relation("currenciesToexchange_rate_logs_currency_id", fields: [currencyId], references: [id], onDelete: Restrict)

  @@map("exchange_rate_logs")
}

model ExchangeRateProvider {
  id           BigInt    @id @default(autoincrement())
  driver       String
  key          String
  currencies   String?
  driverConfig String?   @map("driver_config")
  active       Boolean   @default(true)
  companyId    Int?      @map("company_id")
  createdAt    DateTime? @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  company      Company?  @relation("companiesToexchange_rate_providers", fields: [companyId], references: [id], onDelete: Restrict)

  @@map("exchange_rate_providers")
}

model ExpenseCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  companyId   Int?      @map("company_id")
  createdAt   DateTime? @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  company     Company?  @relation("companiesToexpense_categories", fields: [companyId], references: [id], onDelete: Cascade)
  expenses    Expense[] @relation("expense_categoriesToexpenses")

  @@map("expense_categories")
}

model Expense {
  id                Int             @id @default(autoincrement())
  expenseDate       DateTime        @map("expense_date")
  attachmentReceipt String?         @map("attachment_receipt")
  amount            BigInt
  notes             String?
  expenseCategoryId Int             @map("expense_category_id")
  companyId         Int?            @map("company_id")
  createdAt         DateTime?       @map("created_at")
  updatedAt         DateTime?       @updatedAt @map("updated_at")
  creatorId         Int?            @map("creator_id")
  customerId        BigInt?         @map("customer_id")
  exchangeRate      Decimal?        @map("exchange_rate")
  baseAmount        BigInt?         @map("base_amount")
  currencyId        Int?            @map("currency_id")
  paymentMethodId   Int?            @map("payment_method_id")
  company           Company?        @relation("companiesToexpenses", fields: [companyId], references: [id], onDelete: Cascade)
  user              User?           @relation("expensesTousers", fields: [creatorId], references: [id], onDelete: Cascade)
  expenseCategory   ExpenseCategory @relation("expense_categoriesToexpenses", fields: [expenseCategoryId], references: [id], onDelete: Cascade)
  paymentMethod     PaymentMethod?  @relation("expensesTopayment_methods", fields: [paymentMethodId], references: [id], onDelete: Restrict)

  @@map("expenses")
}

model FileDisk {
  id           BigInt    @id @default(autoincrement())
  name         String
  type         String    @default("REMOTE")
  driver       String
  setAsDefault Boolean   @default(false) @map("set_as_default")
  credentials  String
  createdAt    DateTime? @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  @@map("file_disks")
}

model InvoiceItem {
  id                 Int               @id @default(autoincrement())
  name               String
  description        String?
  discountType       String            @map("discount_type")
  price              BigInt
  quantity           Decimal
  unitName           String?           @map("unit_name")
  discount           Decimal?
  discountVal        BigInt            @map("discount_val")
  tax                BigInt
  total              BigInt
  invoiceId          Int?              @map("invoice_id")
  itemId             Int?              @map("item_id")
  companyId          Int?              @map("company_id")
  createdAt          DateTime?         @map("created_at")
  updatedAt          DateTime?         @updatedAt @map("updated_at")
  recurringInvoiceId BigInt?           @map("recurring_invoice_id")
  basePrice          BigInt?           @map("base_price")
  exchangeRate       Decimal?          @map("exchange_rate")
  baseDiscountVal    BigInt?           @map("base_discount_val")
  baseTax            BigInt?           @map("base_tax")
  baseTotal          BigInt?           @map("base_total")
  company            Company?          @relation("companiesToinvoice_items", fields: [companyId], references: [id], onDelete: Cascade)
  invoice            Invoice?          @relation("invoice_itemsToinvoices", fields: [invoiceId], references: [id], onDelete: Cascade)
  item               Item?             @relation("invoice_itemsToitems", fields: [itemId], references: [id], onDelete: Cascade)
  recurringInvoice   RecurringInvoice? @relation("invoice_itemsTorecurring_invoices", fields: [recurringInvoiceId], references: [id], onDelete: Restrict)
  taxes              Tax[]             @relation("invoice_itemsTotaxes")

  @@map("invoice_items")
}

model Invoice {
  id                     Int               @id @default(autoincrement())
  sequenceNumber         Int?              @map("sequence_number")
  customerSequenceNumber Int?              @map("customer_sequence_number")
  invoiceDate            DateTime          @map("invoice_date")
  dueDate                DateTime?         @map("due_date")
  invoiceNumber          String            @map("invoice_number")
  referenceNumber        String?           @map("reference_number")
  status                 String
  paidStatus             String            @map("paid_status")
  taxPerItem             String            @map("tax_per_item")
  discountPerItem        String            @map("discount_per_item")
  notes                  String?
  discountType           String?           @map("discount_type")
  discount               Decimal?
  discountVal            BigInt?           @map("discount_val")
  subTotal               BigInt            @map("sub_total")
  total                  BigInt
  tax                    BigInt
  dueAmount              BigInt            @map("due_amount")
  sent                   Boolean           @default(false)
  viewed                 Boolean           @default(false)
  uniqueHash             String?           @map("unique_hash")
  companyId              Int?              @map("company_id")
  createdAt              DateTime?         @map("created_at")
  updatedAt              DateTime?         @updatedAt @map("updated_at")
  creatorId              Int?              @map("creator_id")
  templateName           String?           @map("template_name")
  customerId             BigInt?           @map("customer_id")
  recurringInvoiceId     BigInt?           @map("recurring_invoice_id")
  exchangeRate           Decimal?          @map("exchange_rate")
  baseDiscountVal        BigInt?           @map("base_discount_val")
  baseSubTotal           BigInt?           @map("base_sub_total")
  baseTotal              BigInt?           @map("base_total")
  baseTax                BigInt?           @map("base_tax")
  baseDueAmount          BigInt?           @map("base_due_amount")
  currencyId             Int?              @map("currency_id")
  salesTaxType           String?           @map("sales_tax_type")
  salesTaxAddressType    String?           @map("sales_tax_address_type")
  overdue                Boolean           @default(false)
  company                Company?          @relation("companiesToinvoices", fields: [companyId], references: [id], onDelete: Cascade)
  user                   User?             @relation("invoicesTousers", fields: [creatorId], references: [id], onDelete: Cascade)
  currency               Currency?         @relation("currenciesToinvoices", fields: [currencyId], references: [id], onDelete: Restrict)
  customer               Customer?         @relation("customersToinvoices", fields: [customerId], references: [id], onDelete: Restrict)
  recurringInvoice       RecurringInvoice? @relation("invoicesTorecurring_invoices", fields: [recurringInvoiceId], references: [id], onDelete: Restrict)
  invoiceItems           InvoiceItem[]     @relation("invoice_itemsToinvoices")
  payments               Payment[]         @relation("invoicesTopayments")
  taxes                  Tax[]             @relation("invoicesTotaxes")
  transactions           Transaction[]     @relation("invoicesTotransactions")

  @@map("invoices")
}

model Item {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  price         BigInt
  companyId     Int?           @map("company_id")
  unitId        Int?           @map("unit_id")
  createdAt     DateTime?      @map("created_at")
  updatedAt     DateTime?      @updatedAt @map("updated_at")
  creatorId     Int?           @map("creator_id")
  currencyId    Int?           @map("currency_id")
  taxPerItem    Boolean        @default(false) @map("tax_per_item")
  company       Company?       @relation("companiesToitems", fields: [companyId], references: [id], onDelete: Cascade)
  user          User?          @relation("itemsTousers", fields: [creatorId], references: [id], onDelete: Cascade)
  currency      Currency?      @relation("currenciesToitems", fields: [currencyId], references: [id], onDelete: Restrict)
  unit          Unit?          @relation("itemsTounits", fields: [unitId], references: [id], onDelete: Cascade)
  estimateItems EstimateItem[] @relation("estimate_itemsToitems")
  invoiceItems  InvoiceItem[]  @relation("invoice_itemsToitems")
  taxes         Tax[]          @relation("itemsTotaxes")

  @@map("items")
}

model Media {
  id               BigInt    @id @default(autoincrement())
  modelType        String    @map("model_type")
  modelId          BigInt    @map("model_id")
  collectionName   String    @map("collection_name")
  name             String
  fileName         String    @map("file_name")
  mimeType         String?   @map("mime_type")
  disk             String
  size             Int
  manipulations    String
  customProperties String    @map("custom_properties")
  responsiveImages String    @map("responsive_images")
  orderColumn      Int?      @map("order_column")
  createdAt        DateTime? @map("created_at")
  updatedAt        DateTime? @updatedAt @map("updated_at")
  uuid             String?
  conversionsDisk  String?   @map("conversions_disk")

  @@map("media")
}

model Migration {
  id        Int    @id @default(autoincrement())
  migration String
  batch     Int

  @@map("migrations")
}

model Module {
  id        BigInt    @id @default(autoincrement())
  name      String
  version   String
  installed Boolean   @default(false)
  enabled   Boolean   @default(false)
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("modules")
}

model Note {
  id        BigInt    @id @default(autoincrement())
  type      String
  name      String
  notes     String
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  companyId Int?      @map("company_id")
  company   Company?  @relation("companiesTonotes", fields: [companyId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Notification {
  id             String    @id
  type           String
  notifiableType String    @map("notifiable_type")
  notifiableId   BigInt    @map("notifiable_id")
  data           String
  readAt         DateTime? @map("read_at")
  createdAt      DateTime? @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")

  @@map("notifications")
}

model PaymentMethod {
  id         Int                @id @default(autoincrement())
  name       String
  companyId  Int?               @map("company_id")
  createdAt  DateTime?          @map("created_at")
  updatedAt  DateTime?          @updatedAt @map("updated_at")
  driver     String?
  type       PaymentMethodsType @default(general)
  settings   String?
  active     Boolean            @default(false)
  useTestEnv Boolean            @default(false) @map("use_test_env")
  company    Company?           @relation("companiesTopayment_methods", fields: [companyId], references: [id], onDelete: Cascade)
  expenses   Expense[]          @relation("expensesTopayment_methods")
  payments   Payment[]          @relation("payment_methodsTopayments")

  @@map("payment_methods")
}

model Payment {
  id                     BigInt         @id @default(autoincrement())
  sequenceNumber         Int?           @map("sequence_number")
  customerSequenceNumber Int?           @map("customer_sequence_number")
  paymentNumber          String         @map("payment_number")
  paymentDate            DateTime       @map("payment_date")
  notes                  String?
  amount                 BigInt
  uniqueHash             String?        @map("unique_hash")
  invoiceId              Int?           @map("invoice_id")
  companyId              Int?           @map("company_id")
  paymentMethodId        Int?           @map("payment_method_id")
  createdAt              DateTime?      @map("created_at")
  updatedAt              DateTime?      @updatedAt @map("updated_at")
  creatorId              Int?           @map("creator_id")
  customerId             BigInt?        @map("customer_id")
  exchangeRate           Decimal?       @map("exchange_rate")
  baseAmount             BigInt?        @map("base_amount")
  currencyId             Int?           @map("currency_id")
  transactionId          BigInt?        @map("transaction_id")
  company                Company?       @relation("companiesTopayments", fields: [companyId], references: [id], onDelete: Cascade)
  user                   User?          @relation("paymentsTousers", fields: [creatorId], references: [id], onDelete: Cascade)
  currency               Currency?      @relation("currenciesTopayments", fields: [currencyId], references: [id], onDelete: Restrict)
  customer               Customer?      @relation("customersTopayments", fields: [customerId], references: [id], onDelete: Restrict)
  invoice                Invoice?       @relation("invoicesTopayments", fields: [invoiceId], references: [id], onDelete: Cascade)
  paymentMethod          PaymentMethod? @relation("payment_methodsTopayments", fields: [paymentMethodId], references: [id], onDelete: Cascade)
  transaction            Transaction?   @relation("paymentsTotransactions", fields: [transactionId], references: [id], onDelete: Restrict)

  @@map("payments")
}

model Permission {
  id         BigInt  @id @default(autoincrement())
  abilityId  BigInt  @map("ability_id")
  entityId   BigInt? @map("entity_id")
  entityType String? @map("entity_type")
  forbidden  Boolean @default(false)
  scope      Int?
  ability    Ability @relation("abilitiesTopermissions", fields: [abilityId], references: [id], onDelete: Cascade)

  @@map("permissions")
}

model PersonalAccessToken {
  id            BigInt    @id @default(autoincrement())
  tokenableType String    @map("tokenable_type")
  tokenableId   BigInt    @map("tokenable_id")
  name          String
  token         String    @unique
  abilities     String?
  lastUsedAt    DateTime? @map("last_used_at")
  createdAt     DateTime? @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  @@map("personal_access_tokens")
}

model RecurringInvoice {
  id                  BigInt                   @id @default(autoincrement())
  startsAt            DateTime                 @map("starts_at")
  sendAutomatically   Boolean                  @default(false) @map("send_automatically")
  customerId          BigInt?                  @map("customer_id")
  companyId           Int?                     @map("company_id")
  status              RecurringInvoicesStatus  @default(active)
  nextInvoiceAt       DateTime?                @map("next_invoice_at")
  creatorId           Int?                     @map("creator_id")
  frequency           String
  limitBy             RecurringInvoicesLimitBy @default(none) @map("limit_by")
  limitCount          Int?                     @map("limit_count")
  limitDate           DateTime?                @map("limit_date")
  currencyId          Int?                     @map("currency_id")
  exchangeRate        Decimal?                 @map("exchange_rate")
  taxPerItem          String                   @map("tax_per_item")
  discountPerItem     String                   @map("discount_per_item")
  notes               String?
  discountType        String?                  @map("discount_type")
  discount            Decimal?
  discountVal         BigInt?                  @map("discount_val")
  subTotal            BigInt                   @map("sub_total")
  total               BigInt
  tax                 BigInt
  templateName        String?                  @map("template_name")
  dueAmount           BigInt                   @map("due_amount")
  createdAt           DateTime?                @map("created_at")
  updatedAt           DateTime?                @updatedAt @map("updated_at")
  salesTaxType        String?                  @map("sales_tax_type")
  salesTaxAddressType String?                  @map("sales_tax_address_type")
  company             Company?                 @relation("companiesTorecurring_invoices", fields: [companyId], references: [id], onDelete: Restrict)
  user                User?                    @relation("recurring_invoicesTousers", fields: [creatorId], references: [id], onDelete: Restrict)
  currency            Currency?                @relation("currenciesTorecurring_invoices", fields: [currencyId], references: [id], onDelete: Restrict)
  customer            Customer?                @relation("customersTorecurring_invoices", fields: [customerId], references: [id], onDelete: Restrict)
  invoiceItems        InvoiceItem[]            @relation("invoice_itemsTorecurring_invoices")
  invoices            Invoice[]                @relation("invoicesTorecurring_invoices")
  taxes               Tax[]                    @relation("recurring_invoicesTotaxes")

  @@map("recurring_invoices")
}

model Role {
  id            BigInt         @id @default(autoincrement())
  name          String
  title         String?
  level         Int?
  scope         Int?
  createdAt     DateTime?      @map("created_at")
  updatedAt     DateTime?      @updatedAt @map("updated_at")
  assignedRoles AssignedRole[] @relation("assigned_rolesToroles")

  @@unique([name, scope])
  @@map("roles")
}

model Setting {
  id        Int       @id @default(autoincrement())
  option    String
  value     String?
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("settings")
}

model TaxType {
  id            Int          @id @default(autoincrement())
  name          String
  percent       Decimal
  compoundTax   Int          @default(0) @map("compound_tax")
  collectiveTax Int          @default(0) @map("collective_tax")
  description   String?
  companyId     Int?         @map("company_id")
  createdAt     DateTime?    @map("created_at")
  updatedAt     DateTime?    @updatedAt @map("updated_at")
  type          TaxTypesType @default(general)
  company       Company?     @relation("companiesTotax_types", fields: [companyId], references: [id], onDelete: Restrict)
  taxes         Tax[]        @relation("tax_typesTotaxes")

  @@map("tax_types")
}

model Tax {
  id                 Int               @id @default(autoincrement())
  taxTypeId          Int               @map("tax_type_id")
  invoiceId          Int?              @map("invoice_id")
  estimateId         Int?              @map("estimate_id")
  invoiceItemId      Int?              @map("invoice_item_id")
  estimateItemId     Int?              @map("estimate_item_id")
  itemId             Int?              @map("item_id")
  companyId          Int?              @map("company_id")
  name               String
  amount             BigInt
  percent            Decimal
  compoundTax        Int               @default(0) @map("compound_tax")
  createdAt          DateTime?         @map("created_at")
  updatedAt          DateTime?         @updatedAt @map("updated_at")
  exchangeRate       Decimal?          @map("exchange_rate")
  baseAmount         BigInt?           @map("base_amount")
  currencyId         Int?              @map("currency_id")
  recurringInvoiceId BigInt?           @map("recurring_invoice_id")
  company            Company?          @relation("companiesTotaxes", fields: [companyId], references: [id], onDelete: Restrict)
  currency           Currency?         @relation("currenciesTotaxes", fields: [currencyId], references: [id], onDelete: Restrict)
  estimate           Estimate?         @relation("estimatesTotaxes", fields: [estimateId], references: [id], onDelete: Cascade)
  estimateItem       EstimateItem?     @relation("estimate_itemsTotaxes", fields: [estimateItemId], references: [id], onDelete: Cascade)
  invoice            Invoice?          @relation("invoicesTotaxes", fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceItem        InvoiceItem?      @relation("invoice_itemsTotaxes", fields: [invoiceItemId], references: [id], onDelete: Cascade)
  item               Item?             @relation("itemsTotaxes", fields: [itemId], references: [id], onDelete: Cascade)
  recurringInvoice   RecurringInvoice? @relation("recurring_invoicesTotaxes", fields: [recurringInvoiceId], references: [id], onDelete: Restrict)
  taxType            TaxType           @relation("tax_typesTotaxes", fields: [taxTypeId], references: [id])

  @@map("taxes")
}

model Transaction {
  id              BigInt    @id @default(autoincrement())
  transactionId   String?   @map("transaction_id")
  uniqueHash      String?   @map("unique_hash")
  type            String?
  status          String
  transactionDate DateTime  @map("transaction_date")
  companyId       Int?      @map("company_id")
  invoiceId       Int       @map("invoice_id")
  createdAt       DateTime? @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")
  company         Company?  @relation("companiesTotransactions", fields: [companyId], references: [id], onDelete: Restrict)
  invoice         Invoice   @relation("invoicesTotransactions", fields: [invoiceId], references: [id])
  payments        Payment[] @relation("paymentsTotransactions")

  @@map("transactions")
}

model Unit {
  id        Int       @id @default(autoincrement())
  name      String
  companyId Int?      @map("company_id")
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  company   Company?  @relation("companiesTounits", fields: [companyId], references: [id], onDelete: Cascade)
  items     Item[]    @relation("itemsTounits")

  @@map("units")
}

model UserCompany {
  id        BigInt    @id @default(autoincrement())
  userId    Int?      @map("user_id")
  companyId Int?      @map("company_id")
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  company   Company?  @relation("companiesTouser_company", fields: [companyId], references: [id], onDelete: Cascade)
  user      User?     @relation("user_companyTousers", fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_company")
}

model UserSetting {
  id        BigInt    @id @default(autoincrement())
  key       String
  value     String
  userId    Int       @map("user_id")
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  user      User      @relation("user_settingsTousers", fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model User {
  id                Int                @id @default(autoincrement())
  name              String
  email             String?            @unique
  phone             String?
  password          String?
  role              String             @default("user")
  rememberToken     String?            @map("remember_token")
  facebookId        String?            @map("facebook_id")
  googleId          String?            @map("google_id")
  githubId          String?            @map("github_id")
  contactName       String?            @map("contact_name")
  companyName       String?            @map("company_name")
  website           String?
  enablePortal      Boolean?           @map("enable_portal")
  currencyId        Int?               @map("currency_id")
  createdAt         DateTime?          @map("created_at")
  updatedAt         DateTime?          @updatedAt @map("updated_at")
  creatorId         Int?               @map("creator_id")
  user              User?              @relation("usersTousers", fields: [creatorId], references: [id], onDelete: Cascade)
  currency          Currency?          @relation("currenciesTousers", fields: [currencyId], references: [id], onDelete: Cascade)
  addresses         Address[]          @relation("addressesTousers")
  companies         Company[]          @relation("companiesTousers")
  customers         Customer[]         @relation("customersTousers")
  estimates         Estimate[]         @relation("estimatesTousers")
  expenses          Expense[]          @relation("expensesTousers")
  invoices          Invoice[]          @relation("invoicesTousers")
  items             Item[]             @relation("itemsTousers")
  payments          Payment[]          @relation("paymentsTousers")
  recurringInvoices RecurringInvoice[] @relation("recurring_invoicesTousers")
  userCompanies     UserCompany[]      @relation("user_companyTousers")
  userSettings      UserSetting[]      @relation("user_settingsTousers")
  otherUsers        User[]             @relation("usersTousers")

  @@map("users")
}

enum RecurringInvoicesStatus {
  completed @map("COMPLETED")
  onHold    @map("ON_HOLD")
  active    @map("ACTIVE")

  @@map("recurring_invoices_status")
}

enum PaymentMethodsType {
  general @map("GENERAL")
  module  @map("MODULE")

  @@map("payment_methods_type")
}

enum RecurringInvoicesLimitBy {
  none  @map("NONE")
  count @map("COUNT")
  date  @map("DATE")

  @@map("recurring_invoices_limit_by")
}

enum TaxTypesType {
  general @map("GENERAL")
  module  @map("MODULE")

  @@map("tax_types_type")
}
