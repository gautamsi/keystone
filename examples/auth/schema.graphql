# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  password: PasswordState
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  isAdmin: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  password: String
  isAdmin: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  password: String
  isAdmin: Boolean
}

type Project {
  id: ID!
  slug: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  taskRuns(where: TaskRunWhereInput! = {}, orderBy: [TaskRunOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TaskRunWhereUniqueInput): [TaskRun!]
  taskRunsCount(where: TaskRunWhereInput! = {}): Int
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ProjectWhereUniqueInput {
  id: ID
  slug: String
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  taskRuns: TaskRunManyRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TaskRunManyRelationFilter {
  every: TaskRunWhereInput
  some: TaskRunWhereInput
  none: TaskRunWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  deletedAt: OrderDirection
}

input ProjectUpdateInput {
  slug: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  taskRuns: TaskRunRelateToManyForUpdateInput
}

input TaskRunRelateToManyForUpdateInput {
  disconnect: [TaskRunWhereUniqueInput!]
  set: [TaskRunWhereUniqueInput!]
  create: [TaskRunCreateInput!]
  connect: [TaskRunWhereUniqueInput!]
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  slug: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  taskRuns: TaskRunRelateToManyForCreateInput
}

input TaskRunRelateToManyForCreateInput {
  create: [TaskRunCreateInput!]
  connect: [TaskRunWhereUniqueInput!]
}

type TaskRun {
  id: ID!
  number: Int
  friendlyId: String
  status: String
  taskIdentifier: String
  isTest: Boolean
  payload: String
  payloadType: String
  context: JSON
  traceId: String
  spanId: String
  project: Project
  createdAt: DateTime
  updatedAt: DateTime
  attempts(where: TaskRunAttemptWhereInput! = {}, orderBy: [TaskRunAttemptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TaskRunAttemptWhereUniqueInput): [TaskRunAttempt!]
  attemptsCount(where: TaskRunAttemptWhereInput! = {}): Int
  startedAt: DateTime
  completedAt: DateTime
}

input TaskRunWhereUniqueInput {
  id: ID
}

input TaskRunWhereInput {
  AND: [TaskRunWhereInput!]
  OR: [TaskRunWhereInput!]
  NOT: [TaskRunWhereInput!]
  id: IDFilter
  number: IntNullableFilter
  friendlyId: StringFilter
  status: StringNullableFilter
  taskIdentifier: StringFilter
  isTest: BooleanFilter
  payload: StringFilter
  payloadType: StringFilter
  traceId: StringFilter
  spanId: StringFilter
  project: ProjectWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  attempts: TaskRunAttemptManyRelationFilter
  startedAt: DateTimeNullableFilter
  completedAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input TaskRunAttemptManyRelationFilter {
  every: TaskRunAttemptWhereInput
  some: TaskRunAttemptWhereInput
  none: TaskRunAttemptWhereInput
}

input TaskRunOrderByInput {
  id: OrderDirection
  number: OrderDirection
  friendlyId: OrderDirection
  status: OrderDirection
  taskIdentifier: OrderDirection
  isTest: OrderDirection
  payload: OrderDirection
  payloadType: OrderDirection
  traceId: OrderDirection
  spanId: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  startedAt: OrderDirection
  completedAt: OrderDirection
}

input TaskRunUpdateInput {
  number: Int
  friendlyId: String
  status: String
  taskIdentifier: String
  isTest: Boolean
  payload: String
  payloadType: String
  context: JSON
  traceId: String
  spanId: String
  project: ProjectRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  attempts: TaskRunAttemptRelateToManyForUpdateInput
  startedAt: DateTime
  completedAt: DateTime
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input TaskRunAttemptRelateToManyForUpdateInput {
  disconnect: [TaskRunAttemptWhereUniqueInput!]
  set: [TaskRunAttemptWhereUniqueInput!]
  create: [TaskRunAttemptCreateInput!]
  connect: [TaskRunAttemptWhereUniqueInput!]
}

input TaskRunUpdateArgs {
  where: TaskRunWhereUniqueInput!
  data: TaskRunUpdateInput!
}

input TaskRunCreateInput {
  number: Int
  friendlyId: String
  status: String
  taskIdentifier: String
  isTest: Boolean
  payload: String
  payloadType: String
  context: JSON
  traceId: String
  spanId: String
  project: ProjectRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  attempts: TaskRunAttemptRelateToManyForCreateInput
  startedAt: DateTime
  completedAt: DateTime
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input TaskRunAttemptRelateToManyForCreateInput {
  create: [TaskRunAttemptCreateInput!]
  connect: [TaskRunAttemptWhereUniqueInput!]
}

type TaskRunAttempt {
  id: ID!
  number: Int
  friendlyId: String
  taskRun: TaskRun
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  startedAt: DateTime
  completedAt: DateTime
  error: JSON
  output: String
  outputType: String
}

input TaskRunAttemptWhereUniqueInput {
  id: ID
}

input TaskRunAttemptWhereInput {
  AND: [TaskRunAttemptWhereInput!]
  OR: [TaskRunAttemptWhereInput!]
  NOT: [TaskRunAttemptWhereInput!]
  id: IDFilter
  number: IntNullableFilter
  friendlyId: StringFilter
  taskRun: TaskRunWhereInput
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  startedAt: DateTimeNullableFilter
  completedAt: DateTimeNullableFilter
  output: StringFilter
  outputType: StringFilter
}

input TaskRunAttemptOrderByInput {
  id: OrderDirection
  number: OrderDirection
  friendlyId: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  startedAt: OrderDirection
  completedAt: OrderDirection
  output: OrderDirection
  outputType: OrderDirection
}

input TaskRunAttemptUpdateInput {
  number: Int
  friendlyId: String
  taskRun: TaskRunRelateToOneForUpdateInput
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  startedAt: DateTime
  completedAt: DateTime
  error: JSON
  output: String
  outputType: String
}

input TaskRunRelateToOneForUpdateInput {
  create: TaskRunCreateInput
  connect: TaskRunWhereUniqueInput
  disconnect: Boolean
}

input TaskRunAttemptUpdateArgs {
  where: TaskRunAttemptWhereUniqueInput!
  data: TaskRunAttemptUpdateInput!
}

input TaskRunAttemptCreateInput {
  number: Int
  friendlyId: String
  taskRun: TaskRunRelateToOneForCreateInput
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  startedAt: DateTime
  completedAt: DateTime
  error: JSON
  output: String
  outputType: String
}

input TaskRunRelateToOneForCreateInput {
  create: TaskRunCreateInput
  connect: TaskRunWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createTaskRun(data: TaskRunCreateInput!): TaskRun
  createTaskRuns(data: [TaskRunCreateInput!]!): [TaskRun]
  updateTaskRun(where: TaskRunWhereUniqueInput!, data: TaskRunUpdateInput!): TaskRun
  updateTaskRuns(data: [TaskRunUpdateArgs!]!): [TaskRun]
  deleteTaskRun(where: TaskRunWhereUniqueInput!): TaskRun
  deleteTaskRuns(where: [TaskRunWhereUniqueInput!]!): [TaskRun]
  createTaskRunAttempt(data: TaskRunAttemptCreateInput!): TaskRunAttempt
  createTaskRunAttempts(data: [TaskRunAttemptCreateInput!]!): [TaskRunAttempt]
  updateTaskRunAttempt(where: TaskRunAttemptWhereUniqueInput!, data: TaskRunAttemptUpdateInput!): TaskRunAttempt
  updateTaskRunAttempts(data: [TaskRunAttemptUpdateArgs!]!): [TaskRunAttempt]
  deleteTaskRunAttempt(where: TaskRunAttemptWhereUniqueInput!): TaskRunAttempt
  deleteTaskRunAttempts(where: [TaskRunAttemptWhereUniqueInput!]!): [TaskRunAttempt]
  endSession: Boolean!
  authenticateUserWithPassword(name: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  taskRun(where: TaskRunWhereUniqueInput!): TaskRun
  taskRuns(where: TaskRunWhereInput! = {}, orderBy: [TaskRunOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TaskRunWhereUniqueInput): [TaskRun!]
  taskRunsCount(where: TaskRunWhereInput! = {}): Int
  taskRunAttempt(where: TaskRunAttemptWhereUniqueInput!): TaskRunAttempt
  taskRunAttempts(where: TaskRunAttemptWhereInput! = {}, orderBy: [TaskRunAttemptOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TaskRunAttemptWhereUniqueInput): [TaskRunAttempt!]
  taskRunAttemptsCount(where: TaskRunAttemptWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: User
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  description: String
  label: String!
  labelField: String!
  singular: String!
  plural: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  pageSize: Int!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideNavigation: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
