diff --git a/node_modules/@keystone-6/core/admin-ui/context/dist/keystone-6-core-admin-ui-context.cjs.dev.js b/node_modules/@keystone-6/core/admin-ui/context/dist/keystone-6-core-admin-ui-context.cjs.dev.js
index 451325d..a209a92 100644
--- a/node_modules/@keystone-6/core/admin-ui/context/dist/keystone-6-core-admin-ui-context.cjs.dev.js
+++ b/node_modules/@keystone-6/core/admin-ui/context/dist/keystone-6-core-admin-ui-context.cjs.dev.js
@@ -137,7 +137,7 @@ function useAdminMeta(adminMetaHash, fieldViews) {
             fieldMode: (_field$itemView$field = (_field$itemView = field.itemView) === null || _field$itemView === void 0 ? void 0 : _field$itemView.fieldMode) !== null && _field$itemView$field !== void 0 ? _field$itemView$field : null
           },
           views,
-          controller: fieldViews[field.viewsIndex].controller({
+          controller: views.controller({
             listKey: list.key,
             fieldMeta: field.fieldMeta,
             label: field.label,
diff --git a/node_modules/@keystone-6/core/admin-ui/context/dist/keystone-6-core-admin-ui-context.cjs.prod.js b/node_modules/@keystone-6/core/admin-ui/context/dist/keystone-6-core-admin-ui-context.cjs.prod.js
index b506b71..d12ff23 100644
--- a/node_modules/@keystone-6/core/admin-ui/context/dist/keystone-6-core-admin-ui-context.cjs.prod.js
+++ b/node_modules/@keystone-6/core/admin-ui/context/dist/keystone-6-core-admin-ui-context.cjs.prod.js
@@ -137,7 +137,7 @@ function useAdminMeta(adminMetaHash, fieldViews) {
             fieldMode: (_field$itemView$field = (_field$itemView = field.itemView) === null || _field$itemView === void 0 ? void 0 : _field$itemView.fieldMode) !== null && _field$itemView$field !== void 0 ? _field$itemView$field : null
           },
           views,
-          controller: fieldViews[field.viewsIndex].controller({
+          controller: views.controller({
             listKey: list.key,
             fieldMeta: field.fieldMeta,
             label: field.label,
diff --git a/node_modules/@keystone-6/core/admin-ui/context/dist/keystone-6-core-admin-ui-context.esm.js b/node_modules/@keystone-6/core/admin-ui/context/dist/keystone-6-core-admin-ui-context.esm.js
index 53be1d9..24e47cf 100644
--- a/node_modules/@keystone-6/core/admin-ui/context/dist/keystone-6-core-admin-ui-context.esm.js
+++ b/node_modules/@keystone-6/core/admin-ui/context/dist/keystone-6-core-admin-ui-context.esm.js
@@ -128,7 +128,7 @@ function useAdminMeta(adminMetaHash, fieldViews) {
             fieldMode: (_field$itemView$field = (_field$itemView = field.itemView) === null || _field$itemView === void 0 ? void 0 : _field$itemView.fieldMode) !== null && _field$itemView$field !== void 0 ? _field$itemView$field : null
           },
           views,
-          controller: fieldViews[field.viewsIndex].controller({
+          controller: views.controller({
             listKey: list.key,
             fieldMeta: field.fieldMeta,
             label: field.label,
@@ -278,10 +278,10 @@ function getAuthenticatedItem(_ref3, error) {
 
   if (data) {
     if (!data.authenticatedItem || // this is for the case where there is a new type
-    // in the AuthenticatedItem union and the query
-    // that the admin ui has doesn't get the id
-    // (yes, undefined is very specific and very intentional, it should not be checking for null)
-    data.authenticatedItem.id === undefined) {
+      // in the AuthenticatedItem union and the query
+      // that the admin ui has doesn't get the id
+      // (yes, undefined is very specific and very intentional, it should not be checking for null)
+      data.authenticatedItem.id === undefined) {
       return {
         state: 'unauthenticated'
       };
diff --git a/node_modules/@keystone-6/core/fields/types/integer/views/dist/keystone-6-core-fields-types-integer-views.cjs.dev.js b/node_modules/@keystone-6/core/fields/types/integer/views/dist/keystone-6-core-fields-types-integer-views.cjs.dev.js
index f785d34..21f5456 100644
--- a/node_modules/@keystone-6/core/fields/types/integer/views/dist/keystone-6-core-fields-types-integer-views.cjs.dev.js
+++ b/node_modules/@keystone-6/core/fields/types/integer/views/dist/keystone-6-core-fields-types-integer-views.cjs.dev.js
@@ -201,7 +201,7 @@ const controller = config => {
         // while doing nothing else would probably make it worse since anything would be allowed in the input
         // so when a user applies the filter, the query would return an error
         , {
-          type: "number",
+          type: ['in', 'not_in'].includes(props.type) ? 'text' : 'number',
           onChange: event => {
             props.onChange(event.target.value.replace(/[^\d,\s-]/g, ''));
           },
diff --git a/node_modules/@keystone-6/core/fields/types/integer/views/dist/keystone-6-core-fields-types-integer-views.cjs.prod.js b/node_modules/@keystone-6/core/fields/types/integer/views/dist/keystone-6-core-fields-types-integer-views.cjs.prod.js
index 27970fc..dcffa79 100644
--- a/node_modules/@keystone-6/core/fields/types/integer/views/dist/keystone-6-core-fields-types-integer-views.cjs.prod.js
+++ b/node_modules/@keystone-6/core/fields/types/integer/views/dist/keystone-6-core-fields-types-integer-views.cjs.prod.js
@@ -201,7 +201,7 @@ const controller = config => {
         // while doing nothing else would probably make it worse since anything would be allowed in the input
         // so when a user applies the filter, the query would return an error
         , {
-          type: "number",
+          type: ['in', 'not_in'].includes(props.type) ? 'text' : 'number',
           onChange: event => {
             props.onChange(event.target.value.replace(/[^\d,\s-]/g, ''));
           },
diff --git a/node_modules/@keystone-6/core/fields/types/integer/views/dist/keystone-6-core-fields-types-integer-views.esm.js b/node_modules/@keystone-6/core/fields/types/integer/views/dist/keystone-6-core-fields-types-integer-views.esm.js
index df73cb8..79d7424 100644
--- a/node_modules/@keystone-6/core/fields/types/integer/views/dist/keystone-6-core-fields-types-integer-views.esm.js
+++ b/node_modules/@keystone-6/core/fields/types/integer/views/dist/keystone-6-core-fields-types-integer-views.esm.js
@@ -197,7 +197,7 @@ const controller = config => {
         // while doing nothing else would probably make it worse since anything would be allowed in the input
         // so when a user applies the filter, the query would return an error
         , {
-          type: "number",
+          type: ['in', 'not_in'].includes(props.type) ? 'text' : 'number',
           onChange: event => {
             props.onChange(event.target.value.replace(/[^\d,\s-]/g, ''));
           },
